<?xml version="1.0" encoding="utf-8" standalone="no"?>
<test-results xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="nunit_schema_2.5.xsd" name="Pester" total="1388" errors="0" failures="0" not-run="0" inconclusive="0" ignored="0" skipped="0" invalid="0" date="2018-11-28" time="19:06:12">
  <environment user="VssAdministrator" machine-name="factoryvm-az567" cwd="D:\a\1\s" user-domain="factoryvm-az567" platform="Microsoft Windows Server 2016 Datacenter|C:\Windows|\Device\Harddisk0\Partition2" nunit-version="2.5.8.0" os-version="10.0.14393" clr-version="4.0.30319.42000" />
  <culture-info current-culture="en-US" current-uiculture="en-US" />
  <test-suite type="TestFixture" name="Pester" executed="True" result="Success" success="True" time="25.1672" asserts="0" description="Pester">
    <results>
      <test-suite type="TestFixture" name="D:\a\1\s\tests\checks\AgentChecks.Tests.ps1" executed="True" result="Success" success="True" time="1.8784" asserts="0" description="D:\a\1\s\tests\checks\AgentChecks.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Checking Agent.Tests.ps1 checks" executed="True" result="Success" success="True" time="1.8784" asserts="0" description="Checking Agent.Tests.ps1 checks">
            <results>
              <test-suite type="TestFixture" name="Checking Database Mail XPs" executed="True" result="Success" success="True" time="1.8784" asserts="0" description="Checking Database Mail XPs">
                <results>
                  <test-suite type="ParameterizedTest" name="Checking Agent.Tests.ps1 checks.Checking Database Mail XPs.Fails Check Correctly for Config &lt;spconfig&gt; and expected value &lt;expected&gt;" executed="True" result="Success" success="True" time="1.7443" asserts="0" description="Fails Check Correctly for Config &lt;spconfig&gt; and expected value &lt;expected&gt;">
                    <results>
                      <test-case description="Fails Check Correctly for Config 1 and expected value $false" name="Checking Agent.Tests.ps1 checks.Checking Database Mail XPs.Fails Check Correctly for Config 1 and expected value $false" time="1.6354" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Fails Check Correctly for Config 0 and expected value $true" name="Checking Agent.Tests.ps1 checks.Checking Database Mail XPs.Fails Check Correctly for Config 0 and expected value $true" time="0.1089" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="ParameterizedTest" name="Checking Agent.Tests.ps1 checks.Checking Database Mail XPs.Passes Check Correctly for Config &lt;spconfig&gt; and expected value &lt;expected&gt;" executed="True" result="Success" success="True" time="0.0426" asserts="0" description="Passes Check Correctly for Config &lt;spconfig&gt; and expected value &lt;expected&gt;">
                    <results>
                      <test-case description="Passes Check Correctly for Config 0 and expected value $false" name="Checking Agent.Tests.ps1 checks.Checking Database Mail XPs.Passes Check Correctly for Config 0 and expected value $false" time="0.025" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Passes Check Correctly for Config 1 and expected value $true" name="Checking Agent.Tests.ps1 checks.Checking Database Mail XPs.Passes Check Correctly for Config 1 and expected value $true" time="0.0176" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-case description="Should call the mocks" name="Checking Agent.Tests.ps1 checks.Checking Database Mail XPs.Should call the mocks" time="0.0915" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\1\s\tests\checks\DatabaseChecks.Tests.ps1" executed="True" result="Success" success="True" time="1.7881" asserts="0" description="D:\a\1\s\tests\checks\DatabaseChecks.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Checking Database.Assertions.ps1 assertions" executed="True" result="Success" success="True" time="1.7881" asserts="0" description="Checking Database.Assertions.ps1 assertions">
            <results>
              <test-suite type="TestFixture" name="Testing Get-Database" executed="True" result="Success" success="True" time="0.2634" asserts="0" description="Testing Get-Database">
                <results>
                  <test-case description="Should have a Instance parameter" name="Checking Database.Assertions.ps1 assertions.Testing Get-Database.Should have a Instance parameter" time="0.1203" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a ExcludedDbs parameter" name="Checking Database.Assertions.ps1 assertions.Testing Get-Database.Should have a ExcludedDbs parameter" time="0.01" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a Requiredinfo parameter" name="Checking Database.Assertions.ps1 assertions.Testing Get-Database.Should have a Requiredinfo parameter" time="0.0104" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a Exclusions parameter" name="Checking Database.Assertions.ps1 assertions.Testing Get-Database.Should have a Exclusions parameter" time="0.0107" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return the Database Names with the Requiredinfo switch parameter value Name" name="Checking Database.Assertions.ps1 assertions.Testing Get-Database.Should return the Database Names with the Requiredinfo switch parameter value Name" time="0.0617" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should Exclude Databases that are specified for the Name  Required Info" name="Checking Database.Assertions.ps1 assertions.Testing Get-Database.Should Exclude Databases that are specified for the Name  Required Info" time="0.017" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should Exclude none accessible databases if the NotAccessible value for Exclusions parameter is used" name="Checking Database.Assertions.ps1 assertions.Testing Get-Database.Should Exclude none accessible databases if the NotAccessible value for Exclusions parameter is used" time="0.02" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should call the Mocks" name="Checking Database.Assertions.ps1 assertions.Testing Get-Database.Should call the Mocks" time="0.0132" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Testing Assert-DatabaseMaxDop " executed="True" result="Success" success="True" time="0.1666" asserts="0" description="Testing Assert-DatabaseMaxDop ">
                <results>
                  <test-case description="Passes the test successfully" name="Checking Database.Assertions.ps1 assertions.Testing Assert-DatabaseMaxDop .Passes the test successfully" time="0.1353" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Fails the test successfully" name="Checking Database.Assertions.ps1 assertions.Testing Assert-DatabaseMaxDop .Fails the test successfully" time="0.0203" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Calls the Mocks successfully" name="Checking Database.Assertions.ps1 assertions.Testing Assert-DatabaseMaxDop .Calls the Mocks successfully" time="0.0109" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Testing Assert-DatabaseStatus " executed="True" result="Success" success="True" time="0.7588" asserts="0" description="Testing Assert-DatabaseStatus ">
                <results>
                  <test-case description="It Should Pass when all databases are ok" name="Checking Database.Assertions.ps1 assertions.Testing Assert-DatabaseStatus .It Should Pass when all databases are ok" time="0.0787" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="It Should Fail for a database that is readonly" name="Checking Database.Assertions.ps1 assertions.Testing Assert-DatabaseStatus .It Should Fail for a database that is readonly" time="0.1928" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="It Should Not Fail for a database that is readonly when it is excluded" name="Checking Database.Assertions.ps1 assertions.Testing Assert-DatabaseStatus .It Should Not Fail for a database that is readonly when it is excluded" time="0.0297" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="It Should Fail for a database that is offline" name="Checking Database.Assertions.ps1 assertions.Testing Assert-DatabaseStatus .It Should Fail for a database that is offline" time="0.1231" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="It Should Not Fail for a database that is offline when it is excluded" name="Checking Database.Assertions.ps1 assertions.Testing Assert-DatabaseStatus .It Should Not Fail for a database that is offline when it is excluded" time="0.0331" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="It Should Fail for a database that is restoring" name="Checking Database.Assertions.ps1 assertions.Testing Assert-DatabaseStatus .It Should Fail for a database that is restoring" time="0.0479" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="It Should Not Fail for a database that is restoring when it is excluded" name="Checking Database.Assertions.ps1 assertions.Testing Assert-DatabaseStatus .It Should Not Fail for a database that is restoring when it is excluded" time="0.0246" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="It Should Fail for a database that is Recovering" name="Checking Database.Assertions.ps1 assertions.Testing Assert-DatabaseStatus .It Should Fail for a database that is Recovering" time="0.0274" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="It Should Fail for a database that is Recovery pending" name="Checking Database.Assertions.ps1 assertions.Testing Assert-DatabaseStatus .It Should Fail for a database that is Recovery pending" time="0.0358" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="It Should Fail for a database that is AutoClosed" name="Checking Database.Assertions.ps1 assertions.Testing Assert-DatabaseStatus .It Should Fail for a database that is AutoClosed" time="0.0317" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="It Should Fail for a database that is EmergencyMode" name="Checking Database.Assertions.ps1 assertions.Testing Assert-DatabaseStatus .It Should Fail for a database that is EmergencyMode" time="0.0284" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="It Should Fail for a database that is Suspect" name="Checking Database.Assertions.ps1 assertions.Testing Assert-DatabaseStatus .It Should Fail for a database that is Suspect" time="0.0345" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="It Should Fail for a database that is Standby" name="Checking Database.Assertions.ps1 assertions.Testing Assert-DatabaseStatus .It Should Fail for a database that is Standby" time="0.0305" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should Not Fail for databases that are excluded" name="Checking Database.Assertions.ps1 assertions.Testing Assert-DatabaseStatus .Should Not Fail for databases that are excluded" time="0.0201" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should call the Mocks successfully" name="Checking Database.Assertions.ps1 assertions.Testing Assert-DatabaseStatus .Should call the Mocks successfully" time="0.0205" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Testing Assert-DatabaseDuplicateIndex" executed="True" result="Success" success="True" time="0.4601" asserts="0" description="Testing Assert-DatabaseDuplicateIndex">
                <results>
                  <test-case description="Should pass when there are no Duplicate Indexes" name="Checking Database.Assertions.ps1 assertions.Testing Assert-DatabaseDuplicateIndex.Should pass when there are no Duplicate Indexes" time="0.0606" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should fail for one duplicate index" name="Checking Database.Assertions.ps1 assertions.Testing Assert-DatabaseDuplicateIndex.Should fail for one duplicate index" time="0.0732" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should fail for more than one duplicate index" name="Checking Database.Assertions.ps1 assertions.Testing Assert-DatabaseDuplicateIndex.Should fail for more than one duplicate index" time="0.3263" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Testing Assert-DatabaseExists" executed="True" result="Success" success="True" time="0.1393" asserts="0" description="Testing Assert-DatabaseExists">
                <results>
                  <test-case description="Should have a Instance parameter" name="Checking Database.Assertions.ps1 assertions.Testing Assert-DatabaseExists.Should have a Instance parameter" time="0.0323" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a ExpectedDB parameter" name="Checking Database.Assertions.ps1 assertions.Testing Assert-DatabaseExists.Should have a ExpectedDB parameter" time="0.0099" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should Pass when the database exists" name="Checking Database.Assertions.ps1 assertions.Testing Assert-DatabaseExists.Should Pass when the database exists" time="0.0296" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should Pass when the database exists" name="Checking Database.Assertions.ps1 assertions.Testing Assert-DatabaseExists.Should Pass when the database exists" time="0.0125" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should Pass when the database exists" name="Checking Database.Assertions.ps1 assertions.Testing Assert-DatabaseExists.Should Pass when the database exists" time="0.0201" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should Pass when the database exists" name="Checking Database.Assertions.ps1 assertions.Testing Assert-DatabaseExists.Should Pass when the database exists" time="0.0118" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should Fail when the database does not exist" name="Checking Database.Assertions.ps1 assertions.Testing Assert-DatabaseExists.Should Fail when the database does not exist" time="0.023" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\1\s\tests\checks\InstanceChecks.Tests.ps1" executed="True" result="Success" success="True" time="1.8446" asserts="0" description="D:\a\1\s\tests\checks\InstanceChecks.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Checking Instance.Tests.ps1 checks" executed="True" result="Success" success="True" time="1.8446" asserts="0" description="Checking Instance.Tests.ps1 checks">
            <results>
              <test-suite type="TestFixture" name="Checking Backup Compression" executed="True" result="Success" success="True" time="0.2014" asserts="0" description="Checking Backup Compression">
                <results>
                  <test-suite type="ParameterizedTest" name="Checking Instance.Tests.ps1 checks.Checking Backup Compression.Fails Check Correctly for Config &lt;spconfig&gt; and expected value &lt;expected&gt;" executed="True" result="Success" success="True" time="0.1234" asserts="0" description="Fails Check Correctly for Config &lt;spconfig&gt; and expected value &lt;expected&gt;">
                    <results>
                      <test-case description="Fails Check Correctly for Config 1 and expected value $false" name="Checking Instance.Tests.ps1 checks.Checking Backup Compression.Fails Check Correctly for Config 1 and expected value $false" time="0.0964" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Fails Check Correctly for Config 0 and expected value $true" name="Checking Instance.Tests.ps1 checks.Checking Backup Compression.Fails Check Correctly for Config 0 and expected value $true" time="0.027" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="ParameterizedTest" name="Checking Instance.Tests.ps1 checks.Checking Backup Compression.Passes Check Correctly for Config &lt;spconfig&gt; and expected value &lt;expected&gt;" executed="True" result="Success" success="True" time="0.0667" asserts="0" description="Passes Check Correctly for Config &lt;spconfig&gt; and expected value &lt;expected&gt;">
                    <results>
                      <test-case description="Passes Check Correctly for Config 0 and expected value $false" name="Checking Instance.Tests.ps1 checks.Checking Backup Compression.Passes Check Correctly for Config 0 and expected value $false" time="0.0513" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Passes Check Correctly for Config 1 and expected value $true" name="Checking Instance.Tests.ps1 checks.Checking Backup Compression.Passes Check Correctly for Config 1 and expected value $true" time="0.0154" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-case description="Should call the mocks" name="Checking Instance.Tests.ps1 checks.Checking Backup Compression.Should call the mocks" time="0.0113" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Checking Instance MaxDop" executed="True" result="Success" success="True" time="0.1723" asserts="0" description="Checking Instance MaxDop">
                <results>
                  <test-case description="Passes Check Correctly with the use recommended parameter set to true" name="Checking Instance.Tests.ps1 checks.Checking Instance MaxDop.Passes Check Correctly with the use recommended parameter set to true" time="0.0613" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Fails Check Correctly with the use recommended parameter set to true" name="Checking Instance.Tests.ps1 checks.Checking Instance MaxDop.Fails Check Correctly with the use recommended parameter set to true" time="0.0444" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should call the mocks" name="Checking Instance.Tests.ps1 checks.Checking Instance MaxDop.Should call the mocks" time="0.0112" asserts="0" success="True" result="Success" executed="True" />
                  <test-suite type="ParameterizedTest" name="Checking Instance.Tests.ps1 checks.Checking Instance MaxDop.Passes Check Correctly with a specified value &lt;MaxDopValue&gt;" executed="True" result="Success" success="True" time="0.0163" asserts="0" description="Passes Check Correctly with a specified value &lt;MaxDopValue&gt;">
                    <results>
                      <test-case description="Passes Check Correctly with a specified value 5" name="Checking Instance.Tests.ps1 checks.Checking Instance MaxDop.Passes Check Correctly with a specified value 5" time="0.0163" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="ParameterizedTest" name="Checking Instance.Tests.ps1 checks.Checking Instance MaxDop.Fails Check Correctly with with a specified value &lt;MaxDopValue&gt;" executed="True" result="Success" success="True" time="0.039" asserts="0" description="Fails Check Correctly with with a specified value &lt;MaxDopValue&gt;">
                    <results>
                      <test-case description="Fails Check Correctly with with a specified value 5" name="Checking Instance.Tests.ps1 checks.Checking Instance MaxDop.Fails Check Correctly with with a specified value 5" time="0.0205" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Fails Check Correctly with with a specified value 0" name="Checking Instance.Tests.ps1 checks.Checking Instance MaxDop.Fails Check Correctly with with a specified value 0" time="0.0185" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Checking tempdb size" executed="True" result="Success" success="True" time="0.0962" asserts="0" description="Checking tempdb size">
                <results>
                  <test-case description="Should pass the test when all tempdb files are the same size" name="Checking Instance.Tests.ps1 checks.Checking tempdb size.Should pass the test when all tempdb files are the same size" time="0.0658" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should fail when all of the tempdb files are not the same size" name="Checking Instance.Tests.ps1 checks.Checking tempdb size.Should fail when all of the tempdb files are not the same size" time="0.0304" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Checking Supported Build" executed="True" result="Success" success="True" time="0.2422" asserts="0" description="Checking Supported Build">
                <results>
                  <test-suite type="ParameterizedTest" name="Checking Instance.Tests.ps1 checks.Checking Supported Build.Passed check correctly when the current build is not behind the BuildBehind value of &lt;BuildBehind&gt;" executed="True" result="Success" success="True" time="0.0903" asserts="0" description="Passed check correctly when the current build is not behind the BuildBehind value of &lt;BuildBehind&gt;">
                    <results>
                      <test-case description="Passed check correctly when the current build is not behind the BuildBehind value of 1SP" name="Checking Instance.Tests.ps1 checks.Checking Supported Build.Passed check correctly when the current build is not behind the BuildBehind value of 1SP" time="0.0764" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Passed check correctly when the current build is not behind the BuildBehind value of 1CU" name="Checking Instance.Tests.ps1 checks.Checking Supported Build.Passed check correctly when the current build is not behind the BuildBehind value of 1CU" time="0.0139" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="ParameterizedTest" name="Checking Instance.Tests.ps1 checks.Checking Supported Build.Failed check correctly when the current build is behind the BuildBehind value of &lt;BuildBehind&gt;" executed="True" result="Success" success="True" time="0.0509" asserts="0" description="Failed check correctly when the current build is behind the BuildBehind value of &lt;BuildBehind&gt;">
                    <results>
                      <test-case description="Failed check correctly when the current build is behind the BuildBehind value of 1SP" name="Checking Instance.Tests.ps1 checks.Checking Supported Build.Failed check correctly when the current build is behind the BuildBehind value of 1SP" time="0.0315" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Failed check correctly when the current build is behind the BuildBehind value of 1CU" name="Checking Instance.Tests.ps1 checks.Checking Supported Build.Failed check correctly when the current build is behind the BuildBehind value of 1CU" time="0.0193" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="ParameterizedTest" name="Checking Instance.Tests.ps1 checks.Checking Supported Build.Passed check correctly with a SupportedUntil date &gt; today" executed="True" result="Success" success="True" time="0.033" asserts="0" description="Passed check correctly with a SupportedUntil date &gt; today">
                    <results>
                      <test-case description="Passed check correctly with a SupportedUntil date &gt; today" name="Checking Instance.Tests.ps1 checks.Checking Supported Build.Passed check correctly with a SupportedUntil date &gt; today(11/28/2018 19:05:50)" time="0.033" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="ParameterizedTest" name="Checking Instance.Tests.ps1 checks.Checking Supported Build.Failed check correctly with a SupportedUntil date &lt; today" executed="True" result="Success" success="True" time="0.0247" asserts="0" description="Failed check correctly with a SupportedUntil date &lt; today">
                    <results>
                      <test-case description="Failed check correctly with a SupportedUntil date &lt; today" name="Checking Instance.Tests.ps1 checks.Checking Supported Build.Failed check correctly with a SupportedUntil date &lt; today(11/28/2018 19:05:50)" time="0.0247" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="ParameterizedTest" name="Checking Instance.Tests.ps1 checks.Checking Supported Build.Passed check correctly with the BuildWarning window &gt; today" executed="True" result="Success" success="True" time="0.013" asserts="0" description="Passed check correctly with the BuildWarning window &gt; today">
                    <results>
                      <test-case description="Passed check correctly with the BuildWarning window &gt; today" name="Checking Instance.Tests.ps1 checks.Checking Supported Build.Passed check correctly with the BuildWarning window &gt; today(11/28/2018 19:05:50,6)" time="0.013" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="ParameterizedTest" name="Checking Instance.Tests.ps1 checks.Checking Supported Build.Failed check correctly with the BuildWarning window &lt; today" executed="True" result="Success" success="True" time="0.0303" asserts="0" description="Failed check correctly with the BuildWarning window &lt; today">
                    <results>
                      <test-case description="Failed check correctly with the BuildWarning window &lt; today" name="Checking Instance.Tests.ps1 checks.Checking Supported Build.Failed check correctly with the BuildWarning window &lt; today(11/28/2018 19:05:50,6)" time="0.0303" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Checking Trace Flags" executed="True" result="Success" success="True" time="0.3152" asserts="0" description="Checking Trace Flags">
                <results>
                  <test-case description="Should pass correctly when the trace flag exists and it is the only one" name="Checking Instance.Tests.ps1 checks.Checking Trace Flags.Should pass correctly when the trace flag exists and it is the only one" time="0.0652" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should fail correctly when the trace flag does not exist but there is a different trace flag" name="Checking Instance.Tests.ps1 checks.Checking Trace Flags.Should fail correctly when the trace flag does not exist but there is a different trace flag" time="0.0194" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should fail correctly when the trace flag does not exist and there is no trace flag" name="Checking Instance.Tests.ps1 checks.Checking Trace Flags.Should fail correctly when the trace flag does not exist and there is no trace flag" time="0.019" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should Pass Correctly for more than one trace flag when they all exist" name="Checking Instance.Tests.ps1 checks.Checking Trace Flags.Should Pass Correctly for more than one trace flag when they all exist" time="0.0364" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should Pass Correctly for more than one trace flag when they exist but there are extra trace flags" name="Checking Instance.Tests.ps1 checks.Checking Trace Flags.Should Pass Correctly for more than one trace flag when they exist but there are extra trace flags" time="0.0246" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should Fail Correctly when checking more than one trace flag when 1 is missing" name="Checking Instance.Tests.ps1 checks.Checking Trace Flags.Should Fail Correctly when checking more than one trace flag when 1 is missing" time="0.0519" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should Fail Correctly when checking more than one trace flag when 2 are missing" name="Checking Instance.Tests.ps1 checks.Checking Trace Flags.Should Fail Correctly when checking more than one trace flag when 2 are missing" time="0.052" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should pass correctly when no trace flag exists and none expected" name="Checking Instance.Tests.ps1 checks.Checking Trace Flags.Should pass correctly when no trace flag exists and none expected" time="0.0217" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should fail correctly when a trace flag exists and none expected" name="Checking Instance.Tests.ps1 checks.Checking Trace Flags.Should fail correctly when a trace flag exists and none expected" time="0.0251" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Checking Trace Flags Not Expected" executed="True" result="Success" success="True" time="0.1997" asserts="0" description="Checking Trace Flags Not Expected">
                <results>
                  <test-case description="Should pass correctly when the trace flag exists and it is not the one expected to be running" name="Checking Instance.Tests.ps1 checks.Checking Trace Flags Not Expected.Should pass correctly when the trace flag exists and it is not the one expected to be running" time="0.0599" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should pass correctly when no trace flag is running" name="Checking Instance.Tests.ps1 checks.Checking Trace Flags Not Expected.Should pass correctly when no trace flag is running" time="0.0147" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should fail correctly when the trace flag is running and is the only one" name="Checking Instance.Tests.ps1 checks.Checking Trace Flags Not Expected.Should fail correctly when the trace flag is running and is the only one" time="0.0185" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should fail correctly for one trace flag when the trace flag is running but there is another one running as well" name="Checking Instance.Tests.ps1 checks.Checking Trace Flags Not Expected.Should fail correctly for one trace flag when the trace flag is running but there is another one running as well" time="0.0191" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should Pass Correctly for more than one trace flag when no trace flag is set" name="Checking Instance.Tests.ps1 checks.Checking Trace Flags Not Expected.Should Pass Correctly for more than one trace flag when no trace flag is set" time="0.0271" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should Pass Correctly for more than one trace flag when a different one is running" name="Checking Instance.Tests.ps1 checks.Checking Trace Flags Not Expected.Should Pass Correctly for more than one trace flag when a different one is running" time="0.0193" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should Fail Correctly for more than one trace flag when one is running" name="Checking Instance.Tests.ps1 checks.Checking Trace Flags Not Expected.Should Fail Correctly for more than one trace flag when one is running" time="0.0412" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Checking CLR Enabled" executed="True" result="Success" success="True" time="0.1876" asserts="0" description="Checking CLR Enabled">
                <results>
                  <test-suite type="ParameterizedTest" name="Checking Instance.Tests.ps1 checks.Checking CLR Enabled.Fails Check Correctly for Config &lt;spconfig&gt; and expected value &lt;expected&gt;" executed="True" result="Success" success="True" time="0.1466" asserts="0" description="Fails Check Correctly for Config &lt;spconfig&gt; and expected value &lt;expected&gt;">
                    <results>
                      <test-case description="Fails Check Correctly for Config 1 and expected value $false" name="Checking Instance.Tests.ps1 checks.Checking CLR Enabled.Fails Check Correctly for Config 1 and expected value $false" time="0.1243" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Fails Check Correctly for Config 0 and expected value $true" name="Checking Instance.Tests.ps1 checks.Checking CLR Enabled.Fails Check Correctly for Config 0 and expected value $true" time="0.0223" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="ParameterizedTest" name="Checking Instance.Tests.ps1 checks.Checking CLR Enabled.Passes Check Correctly for Config &lt;spconfig&gt; and expected value &lt;expected&gt;" executed="True" result="Success" success="True" time="0.0284" asserts="0" description="Passes Check Correctly for Config &lt;spconfig&gt; and expected value &lt;expected&gt;">
                    <results>
                      <test-case description="Passes Check Correctly for Config 0 and expected value $false" name="Checking Instance.Tests.ps1 checks.Checking CLR Enabled.Passes Check Correctly for Config 0 and expected value $false" time="0.0152" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Passes Check Correctly for Config 1 and expected value $true" name="Checking Instance.Tests.ps1 checks.Checking CLR Enabled.Passes Check Correctly for Config 1 and expected value $true" time="0.0133" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-case description="Should call the mocks" name="Checking Instance.Tests.ps1 checks.Checking CLR Enabled.Should call the mocks" time="0.0126" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Checking Cross DB Ownership Chaining" executed="True" result="Success" success="True" time="0.1821" asserts="0" description="Checking Cross DB Ownership Chaining">
                <results>
                  <test-suite type="ParameterizedTest" name="Checking Instance.Tests.ps1 checks.Checking Cross DB Ownership Chaining.Fails Check Correctly for Config &lt;spconfig&gt; and expected value &lt;expected&gt;" executed="True" result="Success" success="True" time="0.078" asserts="0" description="Fails Check Correctly for Config &lt;spconfig&gt; and expected value &lt;expected&gt;">
                    <results>
                      <test-case description="Fails Check Correctly for Config 1 and expected value $false" name="Checking Instance.Tests.ps1 checks.Checking Cross DB Ownership Chaining.Fails Check Correctly for Config 1 and expected value $false" time="0.0521" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Fails Check Correctly for Config 0 and expected value $true" name="Checking Instance.Tests.ps1 checks.Checking Cross DB Ownership Chaining.Fails Check Correctly for Config 0 and expected value $true" time="0.0259" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="ParameterizedTest" name="Checking Instance.Tests.ps1 checks.Checking Cross DB Ownership Chaining.Passes Check Correctly for Config &lt;spconfig&gt; and expected value &lt;expected&gt;" executed="True" result="Success" success="True" time="0.0934" asserts="0" description="Passes Check Correctly for Config &lt;spconfig&gt; and expected value &lt;expected&gt;">
                    <results>
                      <test-case description="Passes Check Correctly for Config 0 and expected value $false" name="Checking Instance.Tests.ps1 checks.Checking Cross DB Ownership Chaining.Passes Check Correctly for Config 0 and expected value $false" time="0.0789" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Passes Check Correctly for Config 1 and expected value $true" name="Checking Instance.Tests.ps1 checks.Checking Cross DB Ownership Chaining.Passes Check Correctly for Config 1 and expected value $true" time="0.0145" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-case description="Should call the mocks" name="Checking Instance.Tests.ps1 checks.Checking Cross DB Ownership Chaining.Should call the mocks" time="0.0108" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Checking AdHoc Distributed Queries Enabled" executed="True" result="Success" success="True" time="0.1284" asserts="0" description="Checking AdHoc Distributed Queries Enabled">
                <results>
                  <test-suite type="ParameterizedTest" name="Checking Instance.Tests.ps1 checks.Checking AdHoc Distributed Queries Enabled.Fails Check Correctly for Config &lt;spconfig&gt; and expected value &lt;expected&gt;" executed="True" result="Success" success="True" time="0.0775" asserts="0" description="Fails Check Correctly for Config &lt;spconfig&gt; and expected value &lt;expected&gt;">
                    <results>
                      <test-case description="Fails Check Correctly for Config 1 and expected value $false" name="Checking Instance.Tests.ps1 checks.Checking AdHoc Distributed Queries Enabled.Fails Check Correctly for Config 1 and expected value $false" time="0.0581" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Fails Check Correctly for Config 0 and expected value $true" name="Checking Instance.Tests.ps1 checks.Checking AdHoc Distributed Queries Enabled.Fails Check Correctly for Config 0 and expected value $true" time="0.0194" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="ParameterizedTest" name="Checking Instance.Tests.ps1 checks.Checking AdHoc Distributed Queries Enabled.Passes Check Correctly for Config &lt;spconfig&gt; and expected value &lt;expected&gt;" executed="True" result="Success" success="True" time="0.0386" asserts="0" description="Passes Check Correctly for Config &lt;spconfig&gt; and expected value &lt;expected&gt;">
                    <results>
                      <test-case description="Passes Check Correctly for Config 0 and expected value $false" name="Checking Instance.Tests.ps1 checks.Checking AdHoc Distributed Queries Enabled.Passes Check Correctly for Config 0 and expected value $false" time="0.02" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Passes Check Correctly for Config 1 and expected value $true" name="Checking Instance.Tests.ps1 checks.Checking AdHoc Distributed Queries Enabled.Passes Check Correctly for Config 1 and expected value $true" time="0.0186" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-case description="Should call the mocks" name="Checking Instance.Tests.ps1 checks.Checking AdHoc Distributed Queries Enabled.Should call the mocks" time="0.0123" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Checking XPCmdShell is disabled" executed="True" result="Success" success="True" time="0.1193" asserts="0" description="Checking XPCmdShell is disabled">
                <results>
                  <test-suite type="ParameterizedTest" name="Checking Instance.Tests.ps1 checks.Checking XPCmdShell is disabled.Fails Check Correctly for Config &lt;spconfig&gt; and expected value &lt;expected&gt;" executed="True" result="Success" success="True" time="0.0782" asserts="0" description="Fails Check Correctly for Config &lt;spconfig&gt; and expected value &lt;expected&gt;">
                    <results>
                      <test-case description="Fails Check Correctly for Config 1 and expected value $true" name="Checking Instance.Tests.ps1 checks.Checking XPCmdShell is disabled.Fails Check Correctly for Config 1 and expected value $true" time="0.0589" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Fails Check Correctly for Config 0 and expected value $false" name="Checking Instance.Tests.ps1 checks.Checking XPCmdShell is disabled.Fails Check Correctly for Config 0 and expected value $false" time="0.0194" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="ParameterizedTest" name="Checking Instance.Tests.ps1 checks.Checking XPCmdShell is disabled.Passes Check Correctly for Config &lt;spconfig&gt; and expected value &lt;expected&gt;" executed="True" result="Success" success="True" time="0.03" asserts="0" description="Passes Check Correctly for Config &lt;spconfig&gt; and expected value &lt;expected&gt;">
                    <results>
                      <test-case description="Passes Check Correctly for Config 1 and expected value $false" name="Checking Instance.Tests.ps1 checks.Checking XPCmdShell is disabled.Passes Check Correctly for Config 1 and expected value $false" time="0.0158" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Passes Check Correctly for Config 0 and expected value $true" name="Checking Instance.Tests.ps1 checks.Checking XPCmdShell is disabled.Passes Check Correctly for Config 0 and expected value $true" time="0.0142" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-case description="Should call the mocks" name="Checking Instance.Tests.ps1 checks.Checking XPCmdShell is disabled.Should call the mocks" time="0.011" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\1\s\tests\checks\ServerChecks.Tests.ps1" executed="True" result="Success" success="True" time="2.2783" asserts="0" description="D:\a\1\s\tests\checks\ServerChecks.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Checking ServerChecks.Tests" executed="True" result="Success" success="True" time="2.2783" asserts="0" description="Checking ServerChecks.Tests">
            <results>
              <test-suite type="TestFixture" name="Testing Assert-CPUPrioritisation" executed="True" result="Success" success="True" time="0.1321" asserts="0" description="Testing Assert-CPUPrioritisation">
                <results>
                  <test-case description="Should Pass When value set correctly" name="Checking ServerChecks.Tests.Testing Assert-CPUPrioritisation.Should Pass When value set correctly" time="0.1126" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should fail When value set incorrectly" name="Checking ServerChecks.Tests.Testing Assert-CPUPrioritisation.Should fail When value set incorrectly" time="0.0195" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Testing Assert-DiskAllocationUnit" executed="True" result="Success" success="True" time="0.0855" asserts="0" description="Testing Assert-DiskAllocationUnit">
                <results>
                  <test-case description="Should pass when all SQLDisks are formatted with the 65536b (64kb) block allocation unit size" name="Checking ServerChecks.Tests.Testing Assert-DiskAllocationUnit.Should pass when all SQLDisks are formatted with the 65536b (64kb) block allocation unit size" time="0.0681" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should fail when any SQLDisks is formatted with a block allocation unit size that isn't 65536b (64KB)" name="Checking ServerChecks.Tests.Testing Assert-DiskAllocationUnit.Should fail when any SQLDisks is formatted with a block allocation unit size that isn't 65536b (64KB)" time="0.0174" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Testing Get-AllServerInfo for Tags Server with a server that exists" executed="True" result="Success" success="True" time="0.4949" asserts="0" description="Testing Get-AllServerInfo for Tags Server with a server that exists">
                <results>
                  <test-case description="Should get the right results for PingComputer" name="Checking ServerChecks.Tests.Testing Get-AllServerInfo for Tags Server with a server that exists.Should get the right results for PingComputer" time="0.4179" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should get the right results for DiskAllocationUnit" name="Checking ServerChecks.Tests.Testing Get-AllServerInfo for Tags Server with a server that exists.Should get the right results for DiskAllocationUnit" time="0.0216" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should get the right results for PowerPlan" name="Checking ServerChecks.Tests.Testing Get-AllServerInfo for Tags Server with a server that exists.Should get the right results for PowerPlan" time="0.0093" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should get the right results for SPN" name="Checking ServerChecks.Tests.Testing Get-AllServerInfo for Tags Server with a server that exists.Should get the right results for SPN" time="0.0229" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should get the right results for DiskCapacity" name="Checking ServerChecks.Tests.Testing Get-AllServerInfo for Tags Server with a server that exists.Should get the right results for DiskCapacity" time="0.0232" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Testing Get-AllServerInfo for Tags Server with a server that doesn't exist" executed="True" result="Success" success="True" time="0.1522" asserts="0" description="Testing Get-AllServerInfo for Tags Server with a server that doesn't exist">
                <results>
                  <test-case description="Should get the right results for PingComputer" name="Checking ServerChecks.Tests.Testing Get-AllServerInfo for Tags Server with a server that doesn't exist.Should get the right results for PingComputer" time="0.098" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should get the right results for DiskAllocationUnit" name="Checking ServerChecks.Tests.Testing Get-AllServerInfo for Tags Server with a server that doesn't exist.Should get the right results for DiskAllocationUnit" time="0.0196" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should get the right results for PowerPlan" name="Checking ServerChecks.Tests.Testing Get-AllServerInfo for Tags Server with a server that doesn't exist.Should get the right results for PowerPlan" time="0.008" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should get the right results for SPN" name="Checking ServerChecks.Tests.Testing Get-AllServerInfo for Tags Server with a server that doesn't exist.Should get the right results for SPN" time="0.0128" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should get the right results for DiskCapacity" name="Checking ServerChecks.Tests.Testing Get-AllServerInfo for Tags Server with a server that doesn't exist.Should get the right results for DiskCapacity" time="0.0137" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Testing Get-AllServerInfo for Tags PowerPlan with a server that exists" executed="True" result="Success" success="True" time="0.1611" asserts="0" description="Testing Get-AllServerInfo for Tags PowerPlan with a server that exists">
                <results>
                  <test-case description="Should have no results for PingComputer" name="Checking ServerChecks.Tests.Testing Get-AllServerInfo for Tags PowerPlan with a server that exists.Should have no results for PingComputer" time="0.1074" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have no results for DiskAllocationUnit" name="Checking ServerChecks.Tests.Testing Get-AllServerInfo for Tags PowerPlan with a server that exists.Should have no results for DiskAllocationUnit" time="0.0299" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should get the right results for PowerPlan" name="Checking ServerChecks.Tests.Testing Get-AllServerInfo for Tags PowerPlan with a server that exists.Should get the right results for PowerPlan" time="0.0068" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have no results for SPN" name="Checking ServerChecks.Tests.Testing Get-AllServerInfo for Tags PowerPlan with a server that exists.Should have no results for SPN" time="0.0085" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have no results for DiskCapacity" name="Checking ServerChecks.Tests.Testing Get-AllServerInfo for Tags PowerPlan with a server that exists.Should have no results for DiskCapacity" time="0.0085" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Testing Get-AllServerInfo for Tags PowerPlan with a server that doesn't exist" executed="True" result="Success" success="True" time="0.094" asserts="0" description="Testing Get-AllServerInfo for Tags PowerPlan with a server that doesn't exist">
                <results>
                  <test-case description="Should have no results for PingComputer" name="Checking ServerChecks.Tests.Testing Get-AllServerInfo for Tags PowerPlan with a server that doesn't exist.Should have no results for PingComputer" time="0.0636" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have no results for DiskAllocationUnit" name="Checking ServerChecks.Tests.Testing Get-AllServerInfo for Tags PowerPlan with a server that doesn't exist.Should have no results for DiskAllocationUnit" time="0.007" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should get the right results for PowerPlan" name="Checking ServerChecks.Tests.Testing Get-AllServerInfo for Tags PowerPlan with a server that doesn't exist.Should get the right results for PowerPlan" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have no results for SPN" name="Checking ServerChecks.Tests.Testing Get-AllServerInfo for Tags PowerPlan with a server that doesn't exist.Should have no results for SPN" time="0.0069" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have no results for DiskCapacity" name="Checking ServerChecks.Tests.Testing Get-AllServerInfo for Tags PowerPlan with a server that doesn't exist.Should have no results for DiskCapacity" time="0.0092" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Testing Get-AllServerInfo for Tags PingComputer with a server that exists" executed="True" result="Success" success="True" time="0.1176" asserts="0" description="Testing Get-AllServerInfo for Tags PingComputer with a server that exists">
                <results>
                  <test-case description="Should have the right  results for PingComputer" name="Checking ServerChecks.Tests.Testing Get-AllServerInfo for Tags PingComputer with a server that exists.Should have the right  results for PingComputer" time="0.082" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have no results for DiskAllocationUnit" name="Checking ServerChecks.Tests.Testing Get-AllServerInfo for Tags PingComputer with a server that exists.Should have no results for DiskAllocationUnit" time="0.0087" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have no results results for PowerPlan" name="Checking ServerChecks.Tests.Testing Get-AllServerInfo for Tags PingComputer with a server that exists.Should have no results results for PowerPlan" time="0.008" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have no results for SPN" name="Checking ServerChecks.Tests.Testing Get-AllServerInfo for Tags PingComputer with a server that exists.Should have no results for SPN" time="0.0101" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have no results for DiskCapacity" name="Checking ServerChecks.Tests.Testing Get-AllServerInfo for Tags PingComputer with a server that exists.Should have no results for DiskCapacity" time="0.0087" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Testing Get-AllServerInfo for Tags PingComputer with a server that doesn't exist" executed="True" result="Success" success="True" time="0.1029" asserts="0" description="Testing Get-AllServerInfo for Tags PingComputer with a server that doesn't exist">
                <results>
                  <test-case description="Should get the right results for PingComputer" name="Checking ServerChecks.Tests.Testing Get-AllServerInfo for Tags PingComputer with a server that doesn't exist.Should get the right results for PingComputer" time="0.071" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have no results for DiskAllocationUnit" name="Checking ServerChecks.Tests.Testing Get-AllServerInfo for Tags PingComputer with a server that doesn't exist.Should have no results for DiskAllocationUnit" time="0.0084" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have no results for PowerPlan" name="Checking ServerChecks.Tests.Testing Get-AllServerInfo for Tags PingComputer with a server that doesn't exist.Should have no results for PowerPlan" time="0.0082" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have no results for SPN" name="Checking ServerChecks.Tests.Testing Get-AllServerInfo for Tags PingComputer with a server that doesn't exist.Should have no results for SPN" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have no results for DiskCapacity" name="Checking ServerChecks.Tests.Testing Get-AllServerInfo for Tags PingComputer with a server that doesn't exist.Should have no results for DiskCapacity" time="0.0078" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Testing Get-AllServerInfo for Tags DiskAllocationUnit with a server that exists" executed="True" result="Success" success="True" time="0.1163" asserts="0" description="Testing Get-AllServerInfo for Tags DiskAllocationUnit with a server that exists">
                <results>
                  <test-case description="Should have no results for PingComputer" name="Checking ServerChecks.Tests.Testing Get-AllServerInfo for Tags DiskAllocationUnit with a server that exists.Should have no results for PingComputer" time="0.0721" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have the right results for DiskAllocationUnit" name="Checking ServerChecks.Tests.Testing Get-AllServerInfo for Tags DiskAllocationUnit with a server that exists.Should have the right results for DiskAllocationUnit" time="0.0189" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have no results results for PowerPlan" name="Checking ServerChecks.Tests.Testing Get-AllServerInfo for Tags DiskAllocationUnit with a server that exists.Should have no results results for PowerPlan" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have no results for SPN" name="Checking ServerChecks.Tests.Testing Get-AllServerInfo for Tags DiskAllocationUnit with a server that exists.Should have no results for SPN" time="0.009" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have no results for DiskCapacity" name="Checking ServerChecks.Tests.Testing Get-AllServerInfo for Tags DiskAllocationUnit with a server that exists.Should have no results for DiskCapacity" time="0.0087" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Testing Get-AllServerInfo for Tags DiskAllocationUnit with a server that doesn't exist" executed="True" result="Success" success="True" time="0.1094" asserts="0" description="Testing Get-AllServerInfo for Tags DiskAllocationUnit with a server that doesn't exist">
                <results>
                  <test-case description="Should have no results for PingComputer" name="Checking ServerChecks.Tests.Testing Get-AllServerInfo for Tags DiskAllocationUnit with a server that doesn't exist.Should have no results for PingComputer" time="0.0613" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have the right results for DiskAllocationUnit" name="Checking ServerChecks.Tests.Testing Get-AllServerInfo for Tags DiskAllocationUnit with a server that doesn't exist.Should have the right results for DiskAllocationUnit" time="0.0215" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have no results for PowerPlan" name="Checking ServerChecks.Tests.Testing Get-AllServerInfo for Tags DiskAllocationUnit with a server that doesn't exist.Should have no results for PowerPlan" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have no results for SPN" name="Checking ServerChecks.Tests.Testing Get-AllServerInfo for Tags DiskAllocationUnit with a server that doesn't exist.Should have no results for SPN" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have no results for DiskCapacity" name="Checking ServerChecks.Tests.Testing Get-AllServerInfo for Tags DiskAllocationUnit with a server that doesn't exist.Should have no results for DiskCapacity" time="0.0114" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Testing Get-AllServerInfo for Tags SPN with a server that exists" executed="True" result="Success" success="True" time="0.1069" asserts="0" description="Testing Get-AllServerInfo for Tags SPN with a server that exists">
                <results>
                  <test-case description="Should have no results for PingComputer" name="Checking ServerChecks.Tests.Testing Get-AllServerInfo for Tags SPN with a server that exists.Should have no results for PingComputer" time="0.0582" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have no results for DiskAllocationUnit" name="Checking ServerChecks.Tests.Testing Get-AllServerInfo for Tags SPN with a server that exists.Should have no results for DiskAllocationUnit" time="0.01" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have no results results for PowerPlan" name="Checking ServerChecks.Tests.Testing Get-AllServerInfo for Tags SPN with a server that exists.Should have no results results for PowerPlan" time="0.0083" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have the right results for SPN" name="Checking ServerChecks.Tests.Testing Get-AllServerInfo for Tags SPN with a server that exists.Should have the right results for SPN" time="0.0213" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have no results for DiskCapacity" name="Checking ServerChecks.Tests.Testing Get-AllServerInfo for Tags SPN with a server that exists.Should have no results for DiskCapacity" time="0.0091" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Testing Get-AllServerInfo for Tags SPN with a server that doesn't exist" executed="True" result="Success" success="True" time="0.0953" asserts="0" description="Testing Get-AllServerInfo for Tags SPN with a server that doesn't exist">
                <results>
                  <test-case description="Should have no results for PingComputer" name="Checking ServerChecks.Tests.Testing Get-AllServerInfo for Tags SPN with a server that doesn't exist.Should have no results for PingComputer" time="0.063" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have no results for DiskAllocationUnit" name="Checking ServerChecks.Tests.Testing Get-AllServerInfo for Tags SPN with a server that doesn't exist.Should have no results for DiskAllocationUnit" time="0.0086" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have no results for PowerPlan" name="Checking ServerChecks.Tests.Testing Get-AllServerInfo for Tags SPN with a server that doesn't exist.Should have no results for PowerPlan" time="0.0072" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have the right results for SPN" name="Checking ServerChecks.Tests.Testing Get-AllServerInfo for Tags SPN with a server that doesn't exist.Should have the right results for SPN" time="0.0091" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have no results for DiskCapacity" name="Checking ServerChecks.Tests.Testing Get-AllServerInfo for Tags SPN with a server that doesn't exist.Should have no results for DiskCapacity" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Testing Get-AllServerInfo for Tags DiskCapacity with a server that exists" executed="True" result="Success" success="True" time="0.1629" asserts="0" description="Testing Get-AllServerInfo for Tags DiskCapacity with a server that exists">
                <results>
                  <test-case description="Should have no results for PingComputer" name="Checking ServerChecks.Tests.Testing Get-AllServerInfo for Tags DiskCapacity with a server that exists.Should have no results for PingComputer" time="0.1225" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have no results for DiskAllocationUnit" name="Checking ServerChecks.Tests.Testing Get-AllServerInfo for Tags DiskCapacity with a server that exists.Should have no results for DiskAllocationUnit" time="0.009" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have no results results for PowerPlan" name="Checking ServerChecks.Tests.Testing Get-AllServerInfo for Tags DiskCapacity with a server that exists.Should have no results results for PowerPlan" time="0.0068" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have no results for SPN" name="Checking ServerChecks.Tests.Testing Get-AllServerInfo for Tags DiskCapacity with a server that exists.Should have no results for SPN" time="0.0078" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have the right results for DiskCapacity" name="Checking ServerChecks.Tests.Testing Get-AllServerInfo for Tags DiskCapacity with a server that exists.Should have the right results for DiskCapacity" time="0.0169" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Testing Get-AllServerInfo for Tags DiskCapacity with a server that doesn't exist" executed="True" result="Success" success="True" time="0.1015" asserts="0" description="Testing Get-AllServerInfo for Tags DiskCapacity with a server that doesn't exist">
                <results>
                  <test-case description="Should have no results for PingComputer" name="Checking ServerChecks.Tests.Testing Get-AllServerInfo for Tags DiskCapacity with a server that doesn't exist.Should have no results for PingComputer" time="0.0674" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have no results for DiskAllocationUnit" name="Checking ServerChecks.Tests.Testing Get-AllServerInfo for Tags DiskCapacity with a server that doesn't exist.Should have no results for DiskAllocationUnit" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have no results for PowerPlan" name="Checking ServerChecks.Tests.Testing Get-AllServerInfo for Tags DiskCapacity with a server that doesn't exist.Should have no results for PowerPlan" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have no results for SPN" name="Checking ServerChecks.Tests.Testing Get-AllServerInfo for Tags DiskCapacity with a server that doesn't exist.Should have no results for SPN" time="0.0081" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have the right results for DiskCapacity" name="Checking ServerChecks.Tests.Testing Get-AllServerInfo for Tags DiskCapacity with a server that doesn't exist.Should have the right results for DiskCapacity" time="0.0108" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Testing Get-AllServerInfo for Tags DiskCapacity,SPN,DiskAllocationUnit with a server that exists" executed="True" result="Success" success="True" time="0.1425" asserts="0" description="Testing Get-AllServerInfo for Tags DiskCapacity,SPN,DiskAllocationUnit with a server that exists">
                <results>
                  <test-case description="Should have no results for PingComputer" name="Checking ServerChecks.Tests.Testing Get-AllServerInfo for Tags DiskCapacity,SPN,DiskAllocationUnit with a server that exists.Should have no results for PingComputer" time="0.1018" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should get the right results for DiskAllocationUnit" name="Checking ServerChecks.Tests.Testing Get-AllServerInfo for Tags DiskCapacity,SPN,DiskAllocationUnit with a server that exists.Should get the right results for DiskAllocationUnit" time="0.0105" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have no results results for PowerPlan" name="Checking ServerChecks.Tests.Testing Get-AllServerInfo for Tags DiskCapacity,SPN,DiskAllocationUnit with a server that exists.Should have no results results for PowerPlan" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should get the right results for SPN" name="Checking ServerChecks.Tests.Testing Get-AllServerInfo for Tags DiskCapacity,SPN,DiskAllocationUnit with a server that exists.Should get the right results for SPN" time="0.0113" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have the right results for DiskCapacity" name="Checking ServerChecks.Tests.Testing Get-AllServerInfo for Tags DiskCapacity,SPN,DiskAllocationUnit with a server that exists.Should have the right results for DiskCapacity" time="0.0114" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Testing Get-AllServerInfo for Tags DiskCapacity,SPN,DiskAllocationUnit with a server that doesn't exist" executed="True" result="Success" success="True" time="0.1033" asserts="0" description="Testing Get-AllServerInfo for Tags DiskCapacity,SPN,DiskAllocationUnit with a server that doesn't exist">
                <results>
                  <test-case description="Should have no results for PingComputer" name="Checking ServerChecks.Tests.Testing Get-AllServerInfo for Tags DiskCapacity,SPN,DiskAllocationUnit with a server that doesn't exist.Should have no results for PingComputer" time="0.0582" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should get the right results for DiskAllocationUnit" name="Checking ServerChecks.Tests.Testing Get-AllServerInfo for Tags DiskCapacity,SPN,DiskAllocationUnit with a server that doesn't exist.Should get the right results for DiskAllocationUnit" time="0.0165" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have no results for PowerPlan" name="Checking ServerChecks.Tests.Testing Get-AllServerInfo for Tags DiskCapacity,SPN,DiskAllocationUnit with a server that doesn't exist.Should have no results for PowerPlan" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should get the right results for SPN" name="Checking ServerChecks.Tests.Testing Get-AllServerInfo for Tags DiskCapacity,SPN,DiskAllocationUnit with a server that doesn't exist.Should get the right results for SPN" time="0.0099" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have the right results for DiskCapacity" name="Checking ServerChecks.Tests.Testing Get-AllServerInfo for Tags DiskCapacity,SPN,DiskAllocationUnit with a server that doesn't exist.Should have the right results for DiskCapacity" time="0.0113" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\1\s\tests\functions\Export-DbcConfig.Tests.ps1" executed="True" result="Success" success="True" time="0" asserts="0" description="D:\a\1\s\tests\functions\Export-DbcConfig.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\1\s\tests\functions\Get-CheckFile.Tests.ps1" executed="True" result="Success" success="True" time="0.99" asserts="0" description="D:\a\1\s\tests\functions\Get-CheckFile.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Testing Get-CheckFile function" executed="True" result="Success" success="True" time="0.99" asserts="0" description="Testing Get-CheckFile function">
            <results>
              <test-suite type="TestFixture" name="Testing with files matching by name" executed="True" result="Success" success="True" time="0.3059" asserts="0" description="Testing with files matching by name">
                <results>
                  <test-suite type="ParameterizedTest" name="Testing Get-CheckFile function.Testing with files matching by name.&lt;MatchingFile&gt; is found when Check is &lt;CheckValue&gt;" executed="True" result="Success" success="True" time="0.2794" asserts="0" description="&lt;MatchingFile&gt; is found when Check is &lt;CheckValue&gt;">
                    <results>
                      <test-case description="C:\Checks\One.Tests.ps1 is found when Check is One" name="Testing Get-CheckFile function.Testing with files matching by name.C:\Checks\One.Tests.ps1 is found when Check is One" time="0.2185" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="C:\Checks\Two.Tests.ps1 is found when Check is Two" name="Testing Get-CheckFile function.Testing with files matching by name.C:\Checks\Two.Tests.ps1 is found when Check is Two" time="0.0317" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="C:\Checks\Three.Tests.ps1 is found when Check is Three" name="Testing Get-CheckFile function.Testing with files matching by name.C:\Checks\Three.Tests.ps1 is found when Check is Three" time="0.0292" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-case description="When two files match, both should be returned" name="Testing Get-CheckFile function.Testing with files matching by name.When two files match, both should be returned" time="0.0265" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Testing with files matching by tag" executed="True" result="Success" success="True" time="0.3329" asserts="0" description="Testing with files matching by tag">
                <results>
                  <test-suite type="ParameterizedTest" name="Testing Get-CheckFile function.Testing with files matching by tag.&lt;MatchingFile&gt; is found when Check is &lt;CheckValue&gt;" executed="True" result="Success" success="True" time="0.2684" asserts="0" description="&lt;MatchingFile&gt; is found when Check is &lt;CheckValue&gt;">
                    <results>
                      <test-case description="C:\Checks\One.Tests.ps1 is found when Check is FirstCheck" name="Testing Get-CheckFile function.Testing with files matching by tag.C:\Checks\One.Tests.ps1 is found when Check is FirstCheck" time="0.0717" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="C:\Checks\One.Tests.ps1 is found when Check is SecondCheck" name="Testing Get-CheckFile function.Testing with files matching by tag.C:\Checks\One.Tests.ps1 is found when Check is SecondCheck" time="0.0365" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="C:\Checks\One.Tests.ps1 is found when Check is ThirdCheck" name="Testing Get-CheckFile function.Testing with files matching by tag.C:\Checks\One.Tests.ps1 is found when Check is ThirdCheck" time="0.0367" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="C:\Checks\Two.Tests.ps1 is found when Check is FourthCheck" name="Testing Get-CheckFile function.Testing with files matching by tag.C:\Checks\Two.Tests.ps1 is found when Check is FourthCheck" time="0.0527" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="C:\Checks\Two.Tests.ps1 is found when Check is FifthCheck" name="Testing Get-CheckFile function.Testing with files matching by tag.C:\Checks\Two.Tests.ps1 is found when Check is FifthCheck" time="0.0352" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="C:\Checks\Three.Tests.ps1 is found when Check is SixthCheck" name="Testing Get-CheckFile function.Testing with files matching by tag.C:\Checks\Three.Tests.ps1 is found when Check is SixthCheck" time="0.0357" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-case description="When two files match, both should be returned" name="Testing Get-CheckFile function.Testing with files matching by tag.When two files match, both should be returned" time="0.0644" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Testing to make sure duplicates are not returned" executed="True" result="Success" success="True" time="0.2935" asserts="0" description="Testing to make sure duplicates are not returned">
                <results>
                  <test-suite type="ParameterizedTest" name="Testing Get-CheckFile function.Testing to make sure duplicates are not returned.&lt;MatchingFile&gt; is found when Check is &lt;CheckValue&gt;" executed="True" result="Success" success="True" time="0.2935" asserts="0" description="&lt;MatchingFile&gt; is found when Check is &lt;CheckValue&gt;">
                    <results>
                      <test-case description="C:\Checks\One.Tests.ps1 is found when Check is One,FirstCheck" name="Testing Get-CheckFile function.Testing to make sure duplicates are not returned.C:\Checks\One.Tests.ps1 is found when Check is One,FirstCheck" time="0.0614" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="C:\Checks\One.Tests.ps1 is found when Check is One,FirstCheck,SecondCheck" name="Testing Get-CheckFile function.Testing to make sure duplicates are not returned.C:\Checks\One.Tests.ps1 is found when Check is One,FirstCheck,SecondCheck" time="0.124" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="C:\Checks\Two.Tests.ps1 is found when Check is Two,FourthCheck,InvalidCheck" name="Testing Get-CheckFile function.Testing to make sure duplicates are not returned.C:\Checks\Two.Tests.ps1 is found when Check is Two,FourthCheck,InvalidCheck" time="0.0478" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="C:\Checks\Three.Tests.ps1 is found when Check is Three,Three,Three" name="Testing Get-CheckFile function.Testing to make sure duplicates are not returned.C:\Checks\Three.Tests.ps1 is found when Check is Three,Three,Three" time="0.0604" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Testing things that don't match" executed="True" result="Success" success="True" time="0.0577" asserts="0" description="Testing things that don't match">
                <results>
                  <test-case description="If there is no match, no file should be returned" name="Testing Get-CheckFile function.Testing things that don't match.If there is no match, no file should be returned" time="0.0577" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\1\s\tests\functions\Get-CheckInformation.tests.ps1" executed="True" result="Success" success="True" time="0.3725" asserts="0" description="D:\a\1\s\tests\functions\Get-CheckInformation.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Testing Get-CheckInformation" executed="True" result="Success" success="True" time="0.3725" asserts="0" description="Testing Get-CheckInformation">
            <results>
              <test-suite type="TestFixture" name="Input" executed="True" result="Success" success="True" time="0.1005" asserts="0" description="Input">
                <results>
                  <test-case description="Should have a Group Parameter" name="Testing Get-CheckInformation.Input.Should have a Group Parameter" time="0.0653" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a Check Parameter" name="Testing Get-CheckInformation.Input.Should have a Check Parameter" time="0.0095" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a AllChecks Parameter" name="Testing Get-CheckInformation.Input.Should have a AllChecks Parameter" time="0.0168" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should have a ExcludeCheck Parameter" name="Testing Get-CheckInformation.Input.Should have a ExcludeCheck Parameter" time="0.0089" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Output" executed="True" result="Success" success="True" time="0.2721" asserts="0" description="Output">
                <results>
                  <test-case description="Should Return All of the checks for a group when the Check equals the group and nothing excluded" name="Testing Get-CheckInformation.Output.Should Return All of the checks for a group when the Check equals the group and nothing excluded" time="0.0801" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should Return All of the checks for a group When AllChecks is specified and nothing excluded" name="Testing Get-CheckInformation.Output.Should Return All of the checks for a group When AllChecks is specified and nothing excluded" time="0.0202" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should Return one check for a group when one unique tag is specified and nothing excluded" name="Testing Get-CheckInformation.Output.Should Return one check for a group when one unique tag is specified and nothing excluded" time="0.0271" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should Return two checks for a group when two unique tags are specified and nothing excluded" name="Testing Get-CheckInformation.Output.Should Return two checks for a group when two unique tags are specified and nothing excluded" time="0.018" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return a none-unique tag if a none-unique tag is specified and nothing is excluded" name="Testing Get-CheckInformation.Output.Should return a none-unique tag if a none-unique tag is specified and nothing is excluded" time="0.0179" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return two none-unique tags if two none-unique tags are specified and nothing is excluded" name="Testing Get-CheckInformation.Output.Should return two none-unique tags if two none-unique tags are specified and nothing is excluded" time="0.0175" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should Return All of the checks for a group except the excluded ones when the Check equals the group and one check is excluded" name="Testing Get-CheckInformation.Output.Should Return All of the checks for a group except the excluded ones when the Check equals the group and one check is excluded" time="0.0168" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should Return All of the checks for a group except the excluded ones when the Check equals the group and two checks are excluded" name="Testing Get-CheckInformation.Output.Should Return All of the checks for a group except the excluded ones when the Check equals the group and two checks are excluded" time="0.0236" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should Return All of the checks for a group except the excluded ones when AllChecks is specified and one check is excluded" name="Testing Get-CheckInformation.Output.Should Return All of the checks for a group except the excluded ones when AllChecks is specified and one check is excluded" time="0.0189" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should Return All of the checks for a group except the excluded ones when AllChecks is specified and two checks are excluded" name="Testing Get-CheckInformation.Output.Should Return All of the checks for a group except the excluded ones when AllChecks is specified and two checks are excluded" time="0.0173" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Mocks Get-DbcCheck" name="Testing Get-CheckInformation.Output.Mocks Get-DbcCheck" time="0.0145" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\1\s\tests\functions\Get-DatabaseDetail.Tests.ps1" executed="True" result="Success" success="True" time="0" asserts="0" description="D:\a\1\s\tests\functions\Get-DatabaseDetail.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\1\s\tests\functions\Get-DbcCheck.Tests.ps1" executed="True" result="Success" success="True" time="0" asserts="0" description="D:\a\1\s\tests\functions\Get-DbcCheck.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\1\s\tests\functions\Get-DbcConfig.Tests.ps1" executed="True" result="Success" success="True" time="0" asserts="0" description="D:\a\1\s\tests\functions\Get-DbcConfig.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\1\s\tests\functions\Get-DbcConfigValue.Tests.ps1" executed="True" result="Success" success="True" time="0" asserts="0" description="D:\a\1\s\tests\functions\Get-DbcConfigValue.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\1\s\tests\functions\Get-DbcTagCollection.Tests.ps1" executed="True" result="Success" success="True" time="0" asserts="0" description="D:\a\1\s\tests\functions\Get-DbcTagCollection.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\1\s\tests\functions\Import-DbcConfig.Tests.ps1" executed="True" result="Success" success="True" time="0" asserts="0" description="D:\a\1\s\tests\functions\Import-DbcConfig.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\1\s\tests\functions\Invoke-DbcCheck.Tests.ps1" executed="True" result="Success" success="True" time="0" asserts="0" description="D:\a\1\s\tests\functions\Invoke-DbcCheck.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\1\s\tests\functions\Invoke-DbcConfigFile.Tests.ps1" executed="True" result="Success" success="True" time="0" asserts="0" description="D:\a\1\s\tests\functions\Invoke-DbcConfigFile.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\1\s\tests\functions\Set-DbcConfig.Tests.ps1" executed="True" result="Success" success="True" time="0" asserts="0" description="D:\a\1\s\tests\functions\Set-DbcConfig.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\1\s\tests\InModule.Help.Tests.ps1" executed="True" result="Success" success="True" time="2.6466" asserts="0" description="D:\a\1\s\tests\InModule.Help.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Test help for Clear-DbcPowerBiDataSource" executed="True" result="Success" success="True" time="1.4161" asserts="0" description="Test help for Clear-DbcPowerBiDataSource">
            <results>
              <test-suite type="TestFixture" name="Test parameter help for Clear-DbcPowerBiDataSource" executed="True" result="Success" success="True" time="0.067" asserts="0" description="Test parameter help for Clear-DbcPowerBiDataSource">
                <results>
                  <test-case description="Ran silently 10 tests" name="Test help for Clear-DbcPowerBiDataSource.Test parameter help for Clear-DbcPowerBiDataSource.Ran silently 10 tests" time="0.067" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-case description="Ran silently 4 tests" name="Test help for Clear-DbcPowerBiDataSource.Ran silently 4 tests" time="1.3491" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Test help for Export-DbcConfig" executed="True" result="Success" success="True" time="0.0685" asserts="0" description="Test help for Export-DbcConfig">
            <results>
              <test-suite type="TestFixture" name="Test parameter help for Export-DbcConfig" executed="True" result="Success" success="True" time="0.0302" asserts="0" description="Test parameter help for Export-DbcConfig">
                <results>
                  <test-case description="Ran silently 7 tests" name="Test help for Export-DbcConfig.Test parameter help for Export-DbcConfig.Ran silently 7 tests" time="0.0302" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-case description="Ran silently 4 tests" name="Test help for Export-DbcConfig.Ran silently 4 tests" time="0.0384" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Test help for Get-DbcCheck" executed="True" result="Success" success="True" time="0.0611" asserts="0" description="Test help for Get-DbcCheck">
            <results>
              <test-suite type="TestFixture" name="Test parameter help for Get-DbcCheck" executed="True" result="Success" success="True" time="0.0245" asserts="0" description="Test parameter help for Get-DbcCheck">
                <results>
                  <test-case description="Ran silently 7 tests" name="Test help for Get-DbcCheck.Test parameter help for Get-DbcCheck.Ran silently 7 tests" time="0.0245" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-case description="Ran silently 4 tests" name="Test help for Get-DbcCheck.Ran silently 4 tests" time="0.0366" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Test help for Get-DbcConfig" executed="True" result="Success" success="True" time="0.0619" asserts="0" description="Test help for Get-DbcConfig">
            <results>
              <test-suite type="TestFixture" name="Test parameter help for Get-DbcConfig" executed="True" result="Success" success="True" time="0.0247" asserts="0" description="Test parameter help for Get-DbcConfig">
                <results>
                  <test-case description="Ran silently 7 tests" name="Test help for Get-DbcConfig.Test parameter help for Get-DbcConfig.Ran silently 7 tests" time="0.0247" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-case description="Ran silently 4 tests" name="Test help for Get-DbcConfig.Ran silently 4 tests" time="0.0373" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Test help for Get-DbcConfigValue" executed="True" result="Success" success="True" time="0.0648" asserts="0" description="Test help for Get-DbcConfigValue">
            <results>
              <test-suite type="TestFixture" name="Test parameter help for Get-DbcConfigValue" executed="True" result="Success" success="True" time="0.0232" asserts="0" description="Test parameter help for Get-DbcConfigValue">
                <results>
                  <test-case description="Ran silently 7 tests" name="Test help for Get-DbcConfigValue.Test parameter help for Get-DbcConfigValue.Ran silently 7 tests" time="0.0232" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-case description="Ran silently 4 tests" name="Test help for Get-DbcConfigValue.Ran silently 4 tests" time="0.0415" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Test help for Get-DbcReleaseNote" executed="True" result="Success" success="True" time="0.0602" asserts="0" description="Test help for Get-DbcReleaseNote">
            <results>
              <test-suite type="TestFixture" name="Test parameter help for Get-DbcReleaseNote" executed="True" result="Success" success="True" time="0.024" asserts="0" description="Test parameter help for Get-DbcReleaseNote">
                <results>
                  <test-case description="Ran silently 4 tests" name="Test help for Get-DbcReleaseNote.Test parameter help for Get-DbcReleaseNote.Ran silently 4 tests" time="0.024" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-case description="Ran silently 4 tests" name="Test help for Get-DbcReleaseNote.Ran silently 4 tests" time="0.0363" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Test help for Get-DbcTagCollection" executed="True" result="Success" success="True" time="0.0667" asserts="0" description="Test help for Get-DbcTagCollection">
            <results>
              <test-suite type="TestFixture" name="Test parameter help for Get-DbcTagCollection" executed="True" result="Success" success="True" time="0.0227" asserts="0" description="Test parameter help for Get-DbcTagCollection">
                <results>
                  <test-case description="Ran silently 7 tests" name="Test help for Get-DbcTagCollection.Test parameter help for Get-DbcTagCollection.Ran silently 7 tests" time="0.0227" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-case description="Ran silently 4 tests" name="Test help for Get-DbcTagCollection.Ran silently 4 tests" time="0.044" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Test help for Import-DbcConfig" executed="True" result="Success" success="True" time="0.0714" asserts="0" description="Test help for Import-DbcConfig">
            <results>
              <test-suite type="TestFixture" name="Test parameter help for Import-DbcConfig" executed="True" result="Success" success="True" time="0.0319" asserts="0" description="Test parameter help for Import-DbcConfig">
                <results>
                  <test-case description="Ran silently 10 tests" name="Test help for Import-DbcConfig.Test parameter help for Import-DbcConfig.Ran silently 10 tests" time="0.0319" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-case description="Ran silently 4 tests" name="Test help for Import-DbcConfig.Ran silently 4 tests" time="0.0395" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Test help for Invoke-DbcCheck" executed="True" result="Success" success="True" time="0.3076" asserts="0" description="Test help for Invoke-DbcCheck">
            <results>
              <test-suite type="TestFixture" name="Test parameter help for Invoke-DbcCheck" executed="True" result="Success" success="True" time="0.2618" asserts="0" description="Test parameter help for Invoke-DbcCheck">
                <results>
                  <test-case description="help for Invoke-DbcCheck has correct parameter type for Show" name="Test help for Invoke-DbcCheck.Test parameter help for Invoke-DbcCheck.help for Invoke-DbcCheck has correct parameter type for Show" time="0.2618" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-case description="Ran silently 4 tests" name="Test help for Invoke-DbcCheck.Ran silently 4 tests" time="0.0458" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Test help for Invoke-DbcConfigFile" executed="True" result="Success" success="True" time="0.0853" asserts="0" description="Test help for Invoke-DbcConfigFile">
            <results>
              <test-suite type="TestFixture" name="Test parameter help for Invoke-DbcConfigFile" executed="True" result="Success" success="True" time="0.0454" asserts="0" description="Test parameter help for Invoke-DbcConfigFile">
                <results>
                  <test-case description="Ran silently 7 tests" name="Test help for Invoke-DbcConfigFile.Test parameter help for Invoke-DbcConfigFile.Ran silently 7 tests" time="0.0454" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-case description="Ran silently 4 tests" name="Test help for Invoke-DbcConfigFile.Ran silently 4 tests" time="0.0399" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Test help for Reset-DbcConfig" executed="True" result="Success" success="True" time="0.063" asserts="0" description="Test help for Reset-DbcConfig">
            <results>
              <test-suite type="TestFixture" name="Test parameter help for Reset-DbcConfig" executed="True" result="Success" success="True" time="0.0236" asserts="0" description="Test parameter help for Reset-DbcConfig">
                <results>
                  <test-case description="Ran silently 4 tests" name="Test help for Reset-DbcConfig.Test parameter help for Reset-DbcConfig.Ran silently 4 tests" time="0.0236" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-case description="Ran silently 4 tests" name="Test help for Reset-DbcConfig.Ran silently 4 tests" time="0.0394" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Test help for Save-DbcRequiredModules" executed="True" result="Success" success="True" time="0.0629" asserts="0" description="Test help for Save-DbcRequiredModules">
            <results>
              <test-suite type="TestFixture" name="Test parameter help for Save-DbcRequiredModules" executed="True" result="Success" success="True" time="0.0252" asserts="0" description="Test parameter help for Save-DbcRequiredModules">
                <results>
                  <test-case description="Ran silently 7 tests" name="Test help for Save-DbcRequiredModules.Test parameter help for Save-DbcRequiredModules.Ran silently 7 tests" time="0.0252" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-case description="Ran silently 4 tests" name="Test help for Save-DbcRequiredModules.Ran silently 4 tests" time="0.0377" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Test help for Set-DbcConfig" executed="True" result="Success" success="True" time="0.0598" asserts="0" description="Test help for Set-DbcConfig">
            <results>
              <test-suite type="TestFixture" name="Test parameter help for Set-DbcConfig" executed="True" result="Success" success="True" time="0.0235" asserts="0" description="Test parameter help for Set-DbcConfig">
                <results>
                  <test-case description="Ran silently 19 tests" name="Test help for Set-DbcConfig.Test parameter help for Set-DbcConfig.Ran silently 19 tests" time="0.0235" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-case description="Ran silently 4 tests" name="Test help for Set-DbcConfig.Ran silently 4 tests" time="0.0363" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Test help for Start-DbcPowerBi" executed="True" result="Success" success="True" time="0.0665" asserts="0" description="Test help for Start-DbcPowerBi">
            <results>
              <test-suite type="TestFixture" name="Test parameter help for Start-DbcPowerBi" executed="True" result="Success" success="True" time="0.0262" asserts="0" description="Test parameter help for Start-DbcPowerBi">
                <results>
                  <test-case description="Ran silently 10 tests" name="Test help for Start-DbcPowerBi.Test parameter help for Start-DbcPowerBi.Ran silently 10 tests" time="0.0262" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-case description="Ran silently 4 tests" name="Test help for Start-DbcPowerBi.Ran silently 4 tests" time="0.0403" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Test help for Update-DbcPowerBiDataSource" executed="True" result="Success" success="True" time="0.0661" asserts="0" description="Test help for Update-DbcPowerBiDataSource">
            <results>
              <test-suite type="TestFixture" name="Test parameter help for Update-DbcPowerBiDataSource" executed="True" result="Success" success="True" time="0.0243" asserts="0" description="Test parameter help for Update-DbcPowerBiDataSource">
                <results>
                  <test-case description="Ran silently 19 tests" name="Test help for Update-DbcPowerBiDataSource.Test parameter help for Update-DbcPowerBiDataSource.Ran silently 19 tests" time="0.0243" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-case description="Ran silently 4 tests" name="Test help for Update-DbcPowerBiDataSource.Ran silently 4 tests" time="0.0419" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Test help for Update-DbcRequiredModules" executed="True" result="Success" success="True" time="0.0646" asserts="0" description="Test help for Update-DbcRequiredModules">
            <results>
              <test-suite type="TestFixture" name="Test parameter help for Update-DbcRequiredModules" executed="True" result="Success" success="True" time="0.026" asserts="0" description="Test parameter help for Update-DbcRequiredModules">
                <results>
                  <test-case description="Ran silently 3 tests" name="Test help for Update-DbcRequiredModules.Test parameter help for Update-DbcRequiredModules.Ran silently 3 tests" time="0.026" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-case description="Ran silently 4 tests" name="Test help for Update-DbcRequiredModules.Ran silently 4 tests" time="0.0386" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\1\s\tests\Reset-DbcConfig.Tests.ps1" executed="True" result="Success" success="True" time="0.9015" asserts="0" description="D:\a\1\s\tests\Reset-DbcConfig.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Testing Reset-DbcConfig" executed="True" result="Success" success="True" time="0.9015" asserts="0" description="Testing Reset-DbcConfig">
            <results>
              <test-case description="Resetting specific setting works" name="Testing Reset-DbcConfig.Resetting specific setting works" time="0.2875" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Resetting specific setting doesn't change anything else" name="Testing Reset-DbcConfig.Resetting specific setting doesn't change anything else" time="0.0964" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Resetting with wildcard resets all matching settings" name="Testing Reset-DbcConfig.Resetting with wildcard resets all matching settings" time="0.1653" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Resetting with wildcard resets only matching settings" name="Testing Reset-DbcConfig.Resetting with wildcard resets only matching settings" time="0.1028" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Resetting all resets really all" name="Testing Reset-DbcConfig.Resetting all resets really all" time="0.2495" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="D:\a\1\s\tests\Unit.Tests.ps1" executed="True" result="Success" success="True" time="12.4672" asserts="0" description="D:\a\1\s\tests\Unit.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly" executed="True" result="Success" success="True" time="9.8396" asserts="0" description="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly">
            <results>
              <test-suite type="TestFixture" name="Agent.Tests.ps1 - Checking Describes titles and tags" executed="True" result="Success" success="True" time="0.7598" asserts="0" description="Agent.Tests.ps1 - Checking Describes titles and tags">
                <results>
                  <test-case description="Database Mail XPs Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Describes titles and tags.Database Mail XPs Should Use a double quote after the Describe" time="0.4569" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Database Mail XPs should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Describes titles and tags.Database Mail XPs should use a plural for tags" time="0.0158" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="DatabaseMailEnabled should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Describes titles and tags.DatabaseMailEnabled should be Singular" time="0.0129" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="security should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Describes titles and tags.security should be Singular" time="0.0069" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag DatabaseMailEnabled should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Describes titles and tags.The first Tag DatabaseMailEnabled should be in the unique Tags returned from Get-DbcCheck" time="0.0092" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="SQL Agent Account Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Describes titles and tags.SQL Agent Account Should Use a double quote after the Describe" time="0.0101" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="SQL Agent Account should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Describes titles and tags.SQL Agent Account should use a plural for tags" time="0.0082" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AgentServiceAccount should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Describes titles and tags.AgentServiceAccount should be Singular" time="0.0137" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ServiceAccount should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Describes titles and tags.ServiceAccount should be Singular" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag AgentServiceAccount should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Describes titles and tags.The first Tag AgentServiceAccount should be in the unique Tags returned from Get-DbcCheck" time="0.0079" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="DBA Operators Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Describes titles and tags.DBA Operators Should Use a double quote after the Describe" time="0.0082" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="DBA Operators should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Describes titles and tags.DBA Operators should use a plural for tags" time="0.0068" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="DbaOperator should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Describes titles and tags.DbaOperator should be Singular" time="0.007" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Operator should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Describes titles and tags.Operator should be Singular" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag DbaOperator should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Describes titles and tags.The first Tag DbaOperator should be in the unique Tags returned from Get-DbcCheck" time="0.0083" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Failsafe Operator Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Describes titles and tags.Failsafe Operator Should Use a double quote after the Describe" time="0.0086" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Failsafe Operator should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Describes titles and tags.Failsafe Operator should use a plural for tags" time="0.007" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="FailsafeOperator should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Describes titles and tags.FailsafeOperator should be Singular" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Operator should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Describes titles and tags.Operator should be Singular" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag FailsafeOperator should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Describes titles and tags.The first Tag FailsafeOperator should be in the unique Tags returned from Get-DbcCheck" time="0.008" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Database Mail Profile Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Describes titles and tags.Database Mail Profile Should Use a double quote after the Describe" time="0.0083" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Database Mail Profile should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Describes titles and tags.Database Mail Profile should use a plural for tags" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="DatabaseMailProfile should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Describes titles and tags.DatabaseMailProfile should be Singular" time="0.0117" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag DatabaseMailProfile should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Describes titles and tags.The first Tag DatabaseMailProfile should be in the unique Tags returned from Get-DbcCheck" time="0.0086" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Failed Jobs Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Describes titles and tags.Failed Jobs Should Use a double quote after the Describe" time="0.0089" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Failed Jobs should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Describes titles and tags.Failed Jobs should use a plural for tags" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="FailedJob should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Describes titles and tags.FailedJob should be Singular" time="0.0069" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag FailedJob should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Describes titles and tags.The first Tag FailedJob should be in the unique Tags returned from Get-DbcCheck" time="0.0092" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Valid Job Owner Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Describes titles and tags.Valid Job Owner Should Use a double quote after the Describe" time="0.0082" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Valid Job Owner should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Describes titles and tags.Valid Job Owner should use a plural for tags" time="0.0085" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ValidJobOwner should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Describes titles and tags.ValidJobOwner should be Singular" time="0.0088" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag ValidJobOwner should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Describes titles and tags.The first Tag ValidJobOwner should be in the unique Tags returned from Get-DbcCheck" time="0.0082" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Agent Alerts Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Describes titles and tags.Agent Alerts Should Use a double quote after the Describe" time="0.0082" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Agent Alerts should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Describes titles and tags.Agent Alerts should use a plural for tags" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AgentAlert should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Describes titles and tags.AgentAlert should be Singular" time="0.0082" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag AgentAlert should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Describes titles and tags.The first Tag AgentAlert should be in the unique Tags returned from Get-DbcCheck" time="0.0083" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Agent.Tests.ps1 - Checking Contexts" executed="True" result="Success" success="True" time="0.2207" asserts="0" description="Agent.Tests.ps1 - Checking Contexts">
                <results>
                  <test-case description="Testing Database Mail XPs on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Contexts.Testing Database Mail XPs on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0719" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing Testing Database Mail XPs  on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Contexts.Testing Testing Database Mail XPs  on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0072" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing SQL Agent is running on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Contexts.Testing SQL Agent is running on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing SQL Agent is running on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Contexts.Testing SQL Agent is running on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0068" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing SQL Agent is running on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Contexts.Testing SQL Agent is running on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0066" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing SQL Agent is running on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Contexts.Testing SQL Agent is running on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0065" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing DBA Operators exists on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Contexts.Testing DBA Operators exists on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0065" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing DBA Operators exists on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Contexts.Testing DBA Operators exists on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing failsafe operator exists on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Contexts.Testing failsafe operator exists on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0156" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing failsafe operator exists on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Contexts.Testing failsafe operator exists on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing database mail profile is set on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Contexts.Testing database mail profile is set on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing database mail profile is set on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Contexts.Testing database mail profile is set on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Checking for failed enabled jobs on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Contexts.Checking for failed enabled jobs on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Checking for failed enabled jobs on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Contexts.Checking for failed enabled jobs on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0115" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing job owners on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Contexts.Testing job owners on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.007" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing job owners on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Contexts.Testing job owners on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0072" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing Agent Alerts Severity exists on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Contexts.Testing Agent Alerts Severity exists on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing Agent Alerts MessageID exists on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Contexts.Testing Agent Alerts MessageID exists on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing Agent Alerts Severity exists on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Contexts.Testing Agent Alerts Severity exists on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0068" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing Agent Alerts MessageID exists on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Contexts.Testing Agent Alerts MessageID exists on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Agent.Tests.ps1 - Checking Code" executed="True" result="Success" success="True" time="0.533" asserts="0" description="Agent.Tests.ps1 - Checking Code">
                <results>
                  <test-case description="Database Mail XPs Should Use Get-Instance or Get-ComputerName" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Code.Database Mail XPs Should Use Get-Instance or Get-ComputerName" time="0.0481" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Database Mail XPs Should use the ForEach Method" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Code.Database Mail XPs Should use the ForEach Method" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Database Mail XPs Should not use $_" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Code.Database Mail XPs Should not use $_" time="0.0083" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Agent.Tests.ps1 should have the right number of Context blocks as the AST doesnt parse how I like and I cant be bothered to fix it right now" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Code.Agent.Tests.ps1 should have the right number of Context blocks as the AST doesnt parse how I like and I cant be bothered to fix it right now" time="0.0478" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="SQL Agent Account Should Use Get-Instance or Get-ComputerName" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Code.SQL Agent Account Should Use Get-Instance or Get-ComputerName" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="SQL Agent Account Should use the ForEach Method" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Code.SQL Agent Account Should use the ForEach Method" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="SQL Agent Account Should not use $_" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Code.SQL Agent Account Should not use $_" time="0.0072" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Agent.Tests.ps1 should have the right number of Context blocks as the AST doesnt parse how I like and I cant be bothered to fix it right now" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Code.Agent.Tests.ps1 should have the right number of Context blocks as the AST doesnt parse how I like and I cant be bothered to fix it right now" time="0.0338" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="DBA Operators Should Use Get-Instance or Get-ComputerName" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Code.DBA Operators Should Use Get-Instance or Get-ComputerName" time="0.007" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="DBA Operators Should use the ForEach Method" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Code.DBA Operators Should use the ForEach Method" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="DBA Operators Should not use $_" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Code.DBA Operators Should not use $_" time="0.018" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Agent.Tests.ps1 should have the right number of Context blocks as the AST doesnt parse how I like and I cant be bothered to fix it right now" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Code.Agent.Tests.ps1 should have the right number of Context blocks as the AST doesnt parse how I like and I cant be bothered to fix it right now" time="0.0348" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Failsafe Operator Should Use Get-Instance or Get-ComputerName" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Code.Failsafe Operator Should Use Get-Instance or Get-ComputerName" time="0.0069" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Failsafe Operator Should use the ForEach Method" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Code.Failsafe Operator Should use the ForEach Method" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Failsafe Operator Should not use $_" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Code.Failsafe Operator Should not use $_" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Agent.Tests.ps1 should have the right number of Context blocks as the AST doesnt parse how I like and I cant be bothered to fix it right now" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Code.Agent.Tests.ps1 should have the right number of Context blocks as the AST doesnt parse how I like and I cant be bothered to fix it right now" time="0.0335" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Database Mail Profile Should Use Get-Instance or Get-ComputerName" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Code.Database Mail Profile Should Use Get-Instance or Get-ComputerName" time="0.0122" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Database Mail Profile Should use the ForEach Method" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Code.Database Mail Profile Should use the ForEach Method" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Database Mail Profile Should not use $_" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Code.Database Mail Profile Should not use $_" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Agent.Tests.ps1 should have the right number of Context blocks as the AST doesnt parse how I like and I cant be bothered to fix it right now" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Code.Agent.Tests.ps1 should have the right number of Context blocks as the AST doesnt parse how I like and I cant be bothered to fix it right now" time="0.0341" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Failed Jobs Should Use Get-Instance or Get-ComputerName" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Code.Failed Jobs Should Use Get-Instance or Get-ComputerName" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Failed Jobs Should use the ForEach Method" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Code.Failed Jobs Should use the ForEach Method" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Failed Jobs Should not use $_" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Code.Failed Jobs Should not use $_" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Agent.Tests.ps1 should have the right number of Context blocks as the AST doesnt parse how I like and I cant be bothered to fix it right now" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Code.Agent.Tests.ps1 should have the right number of Context blocks as the AST doesnt parse how I like and I cant be bothered to fix it right now" time="0.0411" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Valid Job Owner Should Use Get-Instance or Get-ComputerName" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Code.Valid Job Owner Should Use Get-Instance or Get-ComputerName" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Valid Job Owner Should use the ForEach Method" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Code.Valid Job Owner Should use the ForEach Method" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Valid Job Owner Should not use $_" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Code.Valid Job Owner Should not use $_" time="0.008" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Agent.Tests.ps1 should have the right number of Context blocks as the AST doesnt parse how I like and I cant be bothered to fix it right now" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Code.Agent.Tests.ps1 should have the right number of Context blocks as the AST doesnt parse how I like and I cant be bothered to fix it right now" time="0.033" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Agent Alerts Should Use Get-Instance or Get-ComputerName" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Code.Agent Alerts Should Use Get-Instance or Get-ComputerName" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Agent Alerts Should use the ForEach Method" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Code.Agent Alerts Should use the ForEach Method" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Agent Alerts Should not use $_" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Code.Agent Alerts Should not use $_" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Agent.Tests.ps1 should have the right number of Context blocks as the AST doesnt parse how I like and I cant be bothered to fix it right now" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Agent.Tests.ps1 - Checking Code.Agent.Tests.ps1 should have the right number of Context blocks as the AST doesnt parse how I like and I cant be bothered to fix it right now" time="0.0396" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Database.Tests.ps1 - Checking Describes titles and tags" executed="True" result="Success" success="True" time="1.5341" asserts="0" description="Database.Tests.ps1 - Checking Describes titles and tags">
                <results>
                  <test-case description="Database Collation Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Database Collation Should Use a double quote after the Describe" time="0.2479" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Database Collation should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Database Collation should use a plural for tags" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="DatabaseCollation should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.DatabaseCollation should be Singular" time="0.007" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag DatabaseCollation should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.The first Tag DatabaseCollation should be in the unique Tags returned from Get-DbcCheck" time="0.0082" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Suspect Page Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Suspect Page Should Use a double quote after the Describe" time="0.0091" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Suspect Page should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Suspect Page should use a plural for tags" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="SuspectPage should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.SuspectPage should be Singular" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag SuspectPage should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.The first Tag SuspectPage should be in the unique Tags returned from Get-DbcCheck" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Last Backup Restore Test Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Last Backup Restore Test Should Use a double quote after the Describe" time="0.0088" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Last Backup Restore Test should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Last Backup Restore Test should use a plural for tags" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="TestLastBackup should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.TestLastBackup should be Singular" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Backup should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Backup should be Singular" time="0.0088" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag TestLastBackup should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.The first Tag TestLastBackup should be in the unique Tags returned from Get-DbcCheck" time="0.0092" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Last Backup VerifyOnly Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Last Backup VerifyOnly Should Use a double quote after the Describe" time="0.01" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Last Backup VerifyOnly should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Last Backup VerifyOnly should use a plural for tags" time="0.013" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="TestLastBackupVerifyOnly should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.TestLastBackupVerifyOnly should be Singular" time="0.0114" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Backup should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Backup should be Singular" time="0.0089" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag TestLastBackupVerifyOnly should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.The first Tag TestLastBackupVerifyOnly should be in the unique Tags returned from Get-DbcCheck" time="0.0133" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Valid Database Owner Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Valid Database Owner Should Use a double quote after the Describe" time="0.0082" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Valid Database Owner should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Valid Database Owner should use a plural for tags" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ValidDatabaseOwner should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.ValidDatabaseOwner should be Singular" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag ValidDatabaseOwner should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.The first Tag ValidDatabaseOwner should be in the unique Tags returned from Get-DbcCheck" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Invalid Database Owner Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Invalid Database Owner Should Use a double quote after the Describe" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Invalid Database Owner should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Invalid Database Owner should use a plural for tags" time="0.0066" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="InvalidDatabaseOwner should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.InvalidDatabaseOwner should be Singular" time="0.0067" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag InvalidDatabaseOwner should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.The first Tag InvalidDatabaseOwner should be in the unique Tags returned from Get-DbcCheck" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Last Good DBCC CHECKDB Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Last Good DBCC CHECKDB Should Use a double quote after the Describe" time="0.0088" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Last Good DBCC CHECKDB should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Last Good DBCC CHECKDB should use a plural for tags" time="0.0079" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="LastGoodCheckDb should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.LastGoodCheckDb should be Singular" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag LastGoodCheckDb should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.The first Tag LastGoodCheckDb should be in the unique Tags returned from Get-DbcCheck" time="0.0093" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Column Identity Usage Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Column Identity Usage Should Use a double quote after the Describe" time="0.0088" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Column Identity Usage should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Column Identity Usage should use a plural for tags" time="0.0101" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="IdentityUsage should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.IdentityUsage should be Singular" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag IdentityUsage should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.The first Tag IdentityUsage should be in the unique Tags returned from Get-DbcCheck" time="0.0107" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Recovery Model Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Recovery Model Should Use a double quote after the Describe" time="0.0084" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Recovery Model should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Recovery Model should use a plural for tags" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="RecoveryModel should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.RecoveryModel should be Singular" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="DISA should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.DISA should be Singular" time="0.0079" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag RecoveryModel should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.The first Tag RecoveryModel should be in the unique Tags returned from Get-DbcCheck" time="0.0078" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Duplicate Index Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Duplicate Index Should Use a double quote after the Describe" time="0.0085" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Duplicate Index should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Duplicate Index should use a plural for tags" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="DuplicateIndex should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.DuplicateIndex should be Singular" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag DuplicateIndex should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.The first Tag DuplicateIndex should be in the unique Tags returned from Get-DbcCheck" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Unused Index Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Unused Index Should Use a double quote after the Describe" time="0.0086" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Unused Index should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Unused Index should use a plural for tags" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="UnusedIndex should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.UnusedIndex should be Singular" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag UnusedIndex should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.The first Tag UnusedIndex should be in the unique Tags returned from Get-DbcCheck" time="0.0111" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Disabled Index Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Disabled Index Should Use a double quote after the Describe" time="0.0092" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Disabled Index should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Disabled Index should use a plural for tags" time="0.0069" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="DisabledIndex should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.DisabledIndex should be Singular" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag DisabledIndex should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.The first Tag DisabledIndex should be in the unique Tags returned from Get-DbcCheck" time="0.0084" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Database Growth Event Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Database Growth Event Should Use a double quote after the Describe" time="0.0084" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Database Growth Event should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Database Growth Event should use a plural for tags" time="0.0081" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="DatabaseGrowthEvent should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.DatabaseGrowthEvent should be Singular" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag DatabaseGrowthEvent should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.The first Tag DatabaseGrowthEvent should be in the unique Tags returned from Get-DbcCheck" time="0.009" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Page Verify Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Page Verify Should Use a double quote after the Describe" time="0.0091" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Page Verify should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Page Verify should use a plural for tags" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="PageVerify should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.PageVerify should be Singular" time="0.0072" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag PageVerify should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.The first Tag PageVerify should be in the unique Tags returned from Get-DbcCheck" time="0.0085" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Auto Close Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Auto Close Should Use a double quote after the Describe" time="0.0088" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Auto Close should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Auto Close should use a plural for tags" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AutoClose should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.AutoClose should be Singular" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag AutoClose should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.The first Tag AutoClose should be in the unique Tags returned from Get-DbcCheck" time="0.0117" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Auto Shrink Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Auto Shrink Should Use a double quote after the Describe" time="0.0081" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Auto Shrink should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Auto Shrink should use a plural for tags" time="0.007" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AutoShrink should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.AutoShrink should be Singular" time="0.007" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag AutoShrink should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.The first Tag AutoShrink should be in the unique Tags returned from Get-DbcCheck" time="0.008" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Last Full Backup Times Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Last Full Backup Times Should Use a double quote after the Describe" time="0.0085" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Last Full Backup Times should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Last Full Backup Times should use a plural for tags" time="0.007" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="LastFullBackup should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.LastFullBackup should be Singular" time="0.0083" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="LastBackup should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.LastBackup should be Singular" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Backup should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Backup should be Singular" time="0.0084" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="DISA should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.DISA should be Singular" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag LastFullBackup should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.The first Tag LastFullBackup should be in the unique Tags returned from Get-DbcCheck" time="0.0083" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Last Diff Backup Times Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Last Diff Backup Times Should Use a double quote after the Describe" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Last Diff Backup Times should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Last Diff Backup Times should use a plural for tags" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="LastDiffBackup should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.LastDiffBackup should be Singular" time="0.0108" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="LastBackup should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.LastBackup should be Singular" time="0.0072" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Backup should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Backup should be Singular" time="0.0068" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="DISA should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.DISA should be Singular" time="0.0067" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag LastDiffBackup should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.The first Tag LastDiffBackup should be in the unique Tags returned from Get-DbcCheck" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Last Log Backup Times Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Last Log Backup Times Should Use a double quote after the Describe" time="0.0082" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Last Log Backup Times should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Last Log Backup Times should use a plural for tags" time="0.0072" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="LastLogBackup should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.LastLogBackup should be Singular" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="LastBackup should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.LastBackup should be Singular" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Backup should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Backup should be Singular" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="DISA should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.DISA should be Singular" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag LastLogBackup should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.The first Tag LastLogBackup should be in the unique Tags returned from Get-DbcCheck" time="0.0079" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Virtual Log Files Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Virtual Log Files Should Use a double quote after the Describe" time="0.0079" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Virtual Log Files should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Virtual Log Files should use a plural for tags" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="VirtualLogFile should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.VirtualLogFile should be Singular" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag VirtualLogFile should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.The first Tag VirtualLogFile should be in the unique Tags returned from Get-DbcCheck" time="0.0096" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Log File Count Checks Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Log File Count Checks Should Use a double quote after the Describe" time="0.0122" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Log File Count Checks should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Log File Count Checks should use a plural for tags" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="LogfileCount should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.LogfileCount should be Singular" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag LogfileCount should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.The first Tag LogfileCount should be in the unique Tags returned from Get-DbcCheck" time="0.008" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Log File Size Checks Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Log File Size Checks Should Use a double quote after the Describe" time="0.0086" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Log File Size Checks should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Log File Size Checks should use a plural for tags" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="LogfileSize should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.LogfileSize should be Singular" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag LogfileSize should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.The first Tag LogfileSize should be in the unique Tags returned from Get-DbcCheck" time="0.0079" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Future File Growth Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Future File Growth Should Use a double quote after the Describe" time="0.0083" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Future File Growth should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Future File Growth should use a plural for tags" time="0.0069" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="FutureFileGrowth should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.FutureFileGrowth should be Singular" time="0.0072" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag FutureFileGrowth should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.The first Tag FutureFileGrowth should be in the unique Tags returned from Get-DbcCheck" time="0.008" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Correctly sized Filegroup members Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Correctly sized Filegroup members Should Use a double quote after the Describe" time="0.0083" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Correctly sized Filegroup members should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Correctly sized Filegroup members should use a plural for tags" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="FileGroupBalanced should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.FileGroupBalanced should be Singular" time="0.0085" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag FileGroupBalanced should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.The first Tag FileGroupBalanced should be in the unique Tags returned from Get-DbcCheck" time="0.0112" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Certificate Expiration Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Certificate Expiration Should Use a double quote after the Describe" time="0.0084" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Certificate Expiration should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Certificate Expiration should use a plural for tags" time="0.0202" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="CertificateExpiration should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.CertificateExpiration should be Singular" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag CertificateExpiration should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.The first Tag CertificateExpiration should be in the unique Tags returned from Get-DbcCheck" time="0.0086" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Auto Create Statistics Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Auto Create Statistics Should Use a double quote after the Describe" time="0.008" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Auto Create Statistics should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Auto Create Statistics should use a plural for tags" time="0.0081" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag AutoCreateStatistics should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.The first Tag AutoCreateStatistics should be in the unique Tags returned from Get-DbcCheck" time="0.0084" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Auto Update Statistics Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Auto Update Statistics Should Use a double quote after the Describe" time="0.0083" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Auto Update Statistics should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Auto Update Statistics should use a plural for tags" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag AutoUpdateStatistics should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.The first Tag AutoUpdateStatistics should be in the unique Tags returned from Get-DbcCheck" time="0.0086" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Auto Update Statistics Asynchronously Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Auto Update Statistics Asynchronously Should Use a double quote after the Describe" time="0.0096" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Auto Update Statistics Asynchronously should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Auto Update Statistics Asynchronously should use a plural for tags" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag AutoUpdateStatisticsAsynchronously should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.The first Tag AutoUpdateStatisticsAsynchronously should be in the unique Tags returned from Get-DbcCheck" time="0.0123" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Datafile Auto Growth Configuration Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Datafile Auto Growth Configuration Should Use a double quote after the Describe" time="0.0081" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Datafile Auto Growth Configuration should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Datafile Auto Growth Configuration should use a plural for tags" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="DatafileAutoGrowthType should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.DatafileAutoGrowthType should be Singular" time="0.0082" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag DatafileAutoGrowthType should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.The first Tag DatafileAutoGrowthType should be in the unique Tags returned from Get-DbcCheck" time="0.0085" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Trustworthy Option Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Trustworthy Option Should Use a double quote after the Describe" time="0.0089" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Trustworthy Option should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Trustworthy Option should use a plural for tags" time="0.007" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Trustworthy should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Trustworthy should be Singular" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="DISA should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.DISA should be Singular" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag Trustworthy should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.The first Tag Trustworthy should be in the unique Tags returned from Get-DbcCheck" time="0.0084" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Database Orphaned User Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Database Orphaned User Should Use a double quote after the Describe" time="0.0085" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Database Orphaned User should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Database Orphaned User should use a plural for tags" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OrphanedUser should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.OrphanedUser should be Singular" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag OrphanedUser should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.The first Tag OrphanedUser should be in the unique Tags returned from Get-DbcCheck" time="0.0081" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="PseudoSimple Recovery Model Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.PseudoSimple Recovery Model Should Use a double quote after the Describe" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="PseudoSimple Recovery Model should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.PseudoSimple Recovery Model should use a plural for tags" time="0.0105" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="PseudoSimple should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.PseudoSimple should be Singular" time="0.0082" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag PseudoSimple should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.The first Tag PseudoSimple should be in the unique Tags returned from Get-DbcCheck" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Compatibility Level Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Compatibility Level Should Use a double quote after the Describe" time="0.0084" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Compatibility Level should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Compatibility Level should use a plural for tags" time="0.0069" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="CompatibilityLevel should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.CompatibilityLevel should be Singular" time="0.0069" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag CompatibilityLevel should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.The first Tag CompatibilityLevel should be in the unique Tags returned from Get-DbcCheck" time="0.0081" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Foreign keys and check constraints not trusted Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Foreign keys and check constraints not trusted Should Use a double quote after the Describe" time="0.008" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Foreign keys and check constraints not trusted should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Foreign keys and check constraints not trusted should use a plural for tags" time="0.0065" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="FKCKTrusted should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.FKCKTrusted should be Singular" time="0.0069" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag FKCKTrusted should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.The first Tag FKCKTrusted should be in the unique Tags returned from Get-DbcCheck" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Database MaxDop Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Database MaxDop Should Use a double quote after the Describe" time="0.009" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Database MaxDop should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Database MaxDop should use a plural for tags" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MaxDopDatabase should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.MaxDopDatabase should be Singular" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MaxDop should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.MaxDop should be Singular" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag MaxDopDatabase should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.The first Tag MaxDopDatabase should be in the unique Tags returned from Get-DbcCheck" time="0.0083" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Database Status Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Database Status Should Use a double quote after the Describe" time="0.0131" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Database Status should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Database Status should use a plural for tags" time="0.007" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag DatabaseStatus should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.The first Tag DatabaseStatus should be in the unique Tags returned from Get-DbcCheck" time="0.0078" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Database Exists Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Database Exists Should Use a double quote after the Describe" time="0.0085" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Database Exists should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.Database Exists should use a plural for tags" time="0.0079" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag DatabaseExists should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Describes titles and tags.The first Tag DatabaseExists should be in the unique Tags returned from Get-DbcCheck" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Database.Tests.ps1 - Checking Contexts" executed="True" result="Success" success="True" time="0.6911" asserts="0" description="Database.Tests.ps1 - Checking Contexts">
                <results>
                  <test-case description="Testing database collation on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Testing database collation on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.123" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing database collation on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Testing database collation on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing suspect pages on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Testing suspect pages on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing suspect pages on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Testing suspect pages on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.007" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing Backup Restore &amp; Integrity Checks on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Testing Backup Restore &amp; Integrity Checks on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing Backup Restore &amp; Integrity Checks on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Testing Backup Restore &amp; Integrity Checks on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0081" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="VerifyOnly tests of last backups on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.VerifyOnly tests of last backups on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="VerifyOnly tests of last backups on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.VerifyOnly tests of last backups on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing Database Owners on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Testing Database Owners on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing Database Owners on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Testing Database Owners on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0072" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing Database Owners on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Testing Database Owners on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0068" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing Database Owners on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Testing Database Owners on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.008" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing Last Good DBCC CHECKDB on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Testing Last Good DBCC CHECKDB on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0089" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing Last Good DBCC CHECKDB on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Testing Last Good DBCC CHECKDB on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0107" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing Column Identity Usage on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Testing Column Identity Usage on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0085" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing Column Identity Usage on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Testing Column Identity Usage on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0084" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing Recovery Model on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Testing Recovery Model on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0078" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing Recovery Model on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Testing Recovery Model on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.011" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing duplicate indexes on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Testing duplicate indexes on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing duplicate indexes on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Testing duplicate indexes on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing Unused indexes on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Testing Unused indexes on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0069" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing Unused indexes on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Testing Unused indexes on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0068" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing Disabled indexes on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Testing Disabled indexes on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.007" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing Disabled indexes on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Testing Disabled indexes on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0072" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing database growth event on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Testing database growth event on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0078" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing database growth event on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Testing database growth event on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing page verify on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Testing page verify on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0072" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing page verify on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Testing page verify on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.007" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing Auto Close on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Testing Auto Close on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0069" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing Auto Close on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Testing Auto Close on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing Auto Shrink on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Testing Auto Shrink on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0072" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing Auto Shrink on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Testing Auto Shrink on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0072" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing last full backups on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Testing last full backups on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing last full backups on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Testing last full backups on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0095" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing last diff backups on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Testing last diff backups on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing last diff backups on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Testing last diff backups on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0069" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing last log backups on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Testing last log backups on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0068" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing last log backups on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Testing last log backups on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.008" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing Database VLFs on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Testing Database VLFs on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0078" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing Database VLFs on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Testing Database VLFs on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0078" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing Log File count for $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Testing Log File count for $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0067" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing Log File count for $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Testing Log File count for $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0085" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing Log File size for $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Testing Log File size for $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing Log File size for $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Testing Log File size for $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0067" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing for files likely to grow soon on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Testing for files likely to grow soon on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0069" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing for files likely to grow soon on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Testing for files likely to grow soon on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing for balanced FileGroups on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Testing for balanced FileGroups on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing for balanced FileGroups on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Testing for balanced FileGroups on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Checking that encryption certificates have not expired on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Checking that encryption certificates have not expired on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Checking that encryption certificates have not expired on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Checking that encryption certificates have not expired on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0099" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing Auto Create Statistics on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Testing Auto Create Statistics on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing Auto Create Statistics on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Testing Auto Create Statistics on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing Auto Update Statistics on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Testing Auto Update Statistics on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0068" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing Auto Update Statistics on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Testing Auto Update Statistics on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.007" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing Auto Update Statistics Asynchronously on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Testing Auto Update Statistics Asynchronously on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing Auto Update Statistics Asynchronously on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Testing Auto Update Statistics Asynchronously on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0084" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing datafile growth type on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Testing datafile growth type on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing datafile growth type on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Testing datafile growth type on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing database trustworthy option on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Testing database trustworthy option on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing database trustworthy option on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Testing database trustworthy option on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing database orphaned user event on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Testing database orphaned user event on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0081" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing database orphaned user event on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Testing database orphaned user event on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing database is not in PseudoSimple recovery model on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Testing database is not in PseudoSimple recovery model on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0069" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing database is not in PseudoSimple recovery model on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Testing database is not in PseudoSimple recovery model on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing database compatibility level matches server compatibility level on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Testing database compatibility level matches server compatibility level on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing database compatibility level matches server compatibility level on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Testing database compatibility level matches server compatibility level on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0069" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing Foreign Keys and Check Constraints are not trusted $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Testing Foreign Keys and Check Constraints are not trusted $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0106" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing Foreign Keys and Check Constraints are not trusted $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Testing Foreign Keys and Check Constraints are not trusted $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0072" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Database MaxDop setting is correct on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Database MaxDop setting is correct on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.007" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Database MaxDop setting is correct on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Database MaxDop setting is correct on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.009" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Database status is correct on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Database status is correct on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0096" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Database status is correct on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Database status is correct on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0093" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Database exists on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Database exists on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0107" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Database exists on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Contexts.Database exists on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0106" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Database.Tests.ps1 - Checking Code" executed="True" result="Success" success="True" time="0.0583" asserts="0" description="Database.Tests.ps1 - Checking Code">
                <results>
                  <test-case description="Database Collation Should Use Get-Instance or Get-ComputerName" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Code.Database Collation Should Use Get-Instance or Get-ComputerName" time="0.0354" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Database Collation Should use the ForEach Method" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Code.Database Collation Should use the ForEach Method" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Database Collation Should not use $_" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Code.Database Collation Should not use $_" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Database Collation Should Contain a Context Block" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Database.Tests.ps1 - Checking Code.Database Collation Should Contain a Context Block" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Domain.Tests.ps1 - Checking Describes titles and tags" executed="True" result="Success" success="True" time="0.4307" asserts="0" description="Domain.Tests.ps1 - Checking Describes titles and tags">
                <results>
                  <test-case description="Active Directory Domain Name Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Domain.Tests.ps1 - Checking Describes titles and tags.Active Directory Domain Name Should Use a double quote after the Describe" time="0.1468" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Active Directory Domain Name should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Domain.Tests.ps1 - Checking Describes titles and tags.Active Directory Domain Name should use a plural for tags" time="0.0137" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="DomainName should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Domain.Tests.ps1 - Checking Describes titles and tags.DomainName should be Singular" time="0.0086" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag DomainName should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Domain.Tests.ps1 - Checking Describes titles and tags.The first Tag DomainName should be in the unique Tags returned from Get-DbcCheck" time="0.0084" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Active Directory OU Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Domain.Tests.ps1 - Checking Describes titles and tags.Active Directory OU Should Use a double quote after the Describe" time="0.2291" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Active Directory OU should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Domain.Tests.ps1 - Checking Describes titles and tags.Active Directory OU should use a plural for tags" time="0.0083" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OrganizationalUnit should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Domain.Tests.ps1 - Checking Describes titles and tags.OrganizationalUnit should be Singular" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag OrganizationalUnit should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Domain.Tests.ps1 - Checking Describes titles and tags.The first Tag OrganizationalUnit should be in the unique Tags returned from Get-DbcCheck" time="0.0082" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Domain.Tests.ps1 - Checking Contexts" executed="True" result="Success" success="True" time="0.0397" asserts="0" description="Domain.Tests.ps1 - Checking Contexts">
                <results>
                  <test-case description="Testing Active Directory Domain Name on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Domain.Tests.ps1 - Checking Contexts.Testing Active Directory Domain Name on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0325" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing Active Directory OU on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Domain.Tests.ps1 - Checking Contexts.Testing Active Directory OU on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0072" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Domain.Tests.ps1 - Checking Code" executed="True" result="Success" success="True" time="0.0806" asserts="0" description="Domain.Tests.ps1 - Checking Code">
                <results>
                  <test-case description="Active Directory Domain Name Should Use Get-Instance or Get-ComputerName" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Domain.Tests.ps1 - Checking Code.Active Directory Domain Name Should Use Get-Instance or Get-ComputerName" time="0.0261" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Active Directory Domain Name Should use the ForEach Method" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Domain.Tests.ps1 - Checking Code.Active Directory Domain Name Should use the ForEach Method" time="0.0108" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Active Directory Domain Name Should not use $_" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Domain.Tests.ps1 - Checking Code.Active Directory Domain Name Should not use $_" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Active Directory Domain Name Should Contain a Context Block" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Domain.Tests.ps1 - Checking Code.Active Directory Domain Name Should Contain a Context Block" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Active Directory OU Should Use Get-Instance or Get-ComputerName" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Domain.Tests.ps1 - Checking Code.Active Directory OU Should Use Get-Instance or Get-ComputerName" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Active Directory OU Should use the ForEach Method" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Domain.Tests.ps1 - Checking Code.Active Directory OU Should use the ForEach Method" time="0.0069" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Active Directory OU Should not use $_" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Domain.Tests.ps1 - Checking Code.Active Directory OU Should not use $_" time="0.0068" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Active Directory OU Should Contain a Context Block" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Domain.Tests.ps1 - Checking Code.Active Directory OU Should Contain a Context Block" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="HADR.Tests.ps1 - Checking Describes titles and tags" executed="True" result="Success" success="True" time="0.182" asserts="0" description="HADR.Tests.ps1 - Checking Describes titles and tags">
                <results>
                  <test-case description="Cluster $clustername Health using Node $clustervm Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.HADR.Tests.ps1 - Checking Describes titles and tags.Cluster $clustername Health using Node $clustervm Should Use a double quote after the Describe" time="0.158" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Cluster $clustername Health using Node $clustervm should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.HADR.Tests.ps1 - Checking Describes titles and tags.Cluster $clustername Health using Node $clustervm should use a plural for tags" time="0.0079" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ClusterHealth should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.HADR.Tests.ps1 - Checking Describes titles and tags.ClusterHealth should be Singular" time="0.0078" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag ClusterHealth should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.HADR.Tests.ps1 - Checking Describes titles and tags.The first Tag ClusterHealth should be in the unique Tags returned from Get-DbcCheck" time="0.0082" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="HADR.Tests.ps1 - Checking Contexts" executed="True" result="Success" success="True" time="0.1047" asserts="0" description="HADR.Tests.ps1 - Checking Contexts">
                <results>
                  <test-case description="Cluster nodes for $clustername Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.HADR.Tests.ps1 - Checking Contexts.Cluster nodes for $clustername Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0529" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Cluster resources for $clustername Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.HADR.Tests.ps1 - Checking Contexts.Cluster resources for $clustername Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Cluster networks for $clustername Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.HADR.Tests.ps1 - Checking Contexts.Cluster networks for $clustername Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="HADR status for $clustername Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.HADR.Tests.ps1 - Checking Contexts.HADR status for $clustername Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.007" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Cluster Connectivity for Availability Group $($AG.Name) on $clustername Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.HADR.Tests.ps1 - Checking Contexts.Cluster Connectivity for Availability Group $($AG.Name) on $clustername Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Availability group status for $($AG.Name) on $clustername Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.HADR.Tests.ps1 - Checking Contexts.Availability group status for $($AG.Name) on $clustername Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Database availability group status for $($AG.Name) on $clustername Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.HADR.Tests.ps1 - Checking Contexts.Database availability group status for $($AG.Name) on $clustername Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Always On extended event status for replica $($psitem.Name) on $clustername Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.HADR.Tests.ps1 - Checking Contexts.Always On extended event status for replica $($psitem.Name) on $clustername Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="HADR.Tests.ps1 - Checking Code" executed="True" result="Success" success="True" time="0.0412" asserts="0" description="HADR.Tests.ps1 - Checking Code">
                <results>
                  <test-case description="Cluster $clustername Health using Node $clustervm Should not use $_" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.HADR.Tests.ps1 - Checking Code.Cluster $clustername Health using Node $clustervm Should not use $_" time="0.0337" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Cluster $clustername Health using Node $clustervm Should Contain a Context Block" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.HADR.Tests.ps1 - Checking Code.Cluster $clustername Health using Node $clustervm Should Contain a Context Block" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Instance.Tests.ps1 - Checking Describes titles and tags" executed="True" result="Success" success="True" time="1.4382" asserts="0" description="Instance.Tests.ps1 - Checking Describes titles and tags">
                <results>
                  <test-case description="Instance Connection Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.Instance Connection Should Use a double quote after the Describe" time="0.2033" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Instance Connection should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.Instance Connection should use a plural for tags" time="0.0082" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="InstanceConnection should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.InstanceConnection should be Singular" time="0.0079" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Connectivity should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.Connectivity should be Singular" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag InstanceConnection should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.The first Tag InstanceConnection should be in the unique Tags returned from Get-DbcCheck" time="0.008" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="SQL Engine Service Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.SQL Engine Service Should Use a double quote after the Describe" time="0.008" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="SQL Engine Service should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.SQL Engine Service should use a plural for tags" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="SqlEngineServiceAccount should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.SqlEngineServiceAccount should be Singular" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ServiceAccount should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.ServiceAccount should be Singular" time="0.007" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag SqlEngineServiceAccount should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.The first Tag SqlEngineServiceAccount should be in the unique Tags returned from Get-DbcCheck" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="TempDB Configuration Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.TempDB Configuration Should Use a double quote after the Describe" time="0.0092" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="TempDB Configuration should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.TempDB Configuration should use a plural for tags" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="TempDbConfiguration should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.TempDbConfiguration should be Singular" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag TempDbConfiguration should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.The first Tag TempDbConfiguration should be in the unique Tags returned from Get-DbcCheck" time="0.0112" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ad Hoc Workload Optimization Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.Ad Hoc Workload Optimization Should Use a double quote after the Describe" time="0.0082" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ad Hoc Workload Optimization should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.Ad Hoc Workload Optimization should use a plural for tags" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdHocWorkload should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.AdHocWorkload should be Singular" time="0.0079" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag AdHocWorkload should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.The first Tag AdHocWorkload should be in the unique Tags returned from Get-DbcCheck" time="0.0078" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Backup Path Access Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.Backup Path Access Should Use a double quote after the Describe" time="0.0087" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Backup Path Access should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.Backup Path Access should use a plural for tags" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Storage should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.Storage should be Singular" time="0.007" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="DISA should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.DISA should be Singular" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag BackupPathAccess should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.The first Tag BackupPathAccess should be in the unique Tags returned from Get-DbcCheck" time="0.008" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Dedicated Administrator Connection Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.Dedicated Administrator Connection Should Use a double quote after the Describe" time="0.0088" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Dedicated Administrator Connection should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.Dedicated Administrator Connection should use a plural for tags" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="DAC should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.DAC should be Singular" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag DAC should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.The first Tag DAC should be in the unique Tags returned from Get-DbcCheck" time="0.0092" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Network Latency Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.Network Latency Should Use a double quote after the Describe" time="0.0083" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Network Latency should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.Network Latency should use a plural for tags" time="0.0103" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="NetworkLatency should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.NetworkLatency should be Singular" time="0.0079" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Connectivity should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.Connectivity should be Singular" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag NetworkLatency should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.The first Tag NetworkLatency should be in the unique Tags returned from Get-DbcCheck" time="0.0081" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Linked Servers Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.Linked Servers Should Use a double quote after the Describe" time="0.0081" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Linked Servers should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.Linked Servers should use a plural for tags" time="0.0069" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="LinkedServerConnection should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.LinkedServerConnection should be Singular" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Connectivity should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.Connectivity should be Singular" time="0.0078" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag LinkedServerConnection should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.The first Tag LinkedServerConnection should be in the unique Tags returned from Get-DbcCheck" time="0.0081" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Max Memory Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.Max Memory Should Use a double quote after the Describe" time="0.0093" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Max Memory should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.Max Memory should use a plural for tags" time="0.0087" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MaxMemory should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.MaxMemory should be Singular" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag MaxMemory should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.The first Tag MaxMemory should be in the unique Tags returned from Get-DbcCheck" time="0.0091" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Orphaned Files Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.Orphaned Files Should Use a double quote after the Describe" time="0.0096" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Orphaned Files should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.Orphaned Files should use a plural for tags" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OrphanedFile should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.OrphanedFile should be Singular" time="0.0104" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag OrphanedFile should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.The first Tag OrphanedFile should be in the unique Tags returned from Get-DbcCheck" time="0.0081" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="SQL and Windows names match Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.SQL and Windows names match Should Use a double quote after the Describe" time="0.0087" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="SQL and Windows names match should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.SQL and Windows names match should use a plural for tags" time="0.0078" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ServerNameMatch should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.ServerNameMatch should be Singular" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag ServerNameMatch should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.The first Tag ServerNameMatch should be in the unique Tags returned from Get-DbcCheck" time="0.0078" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="SQL Memory Dumps Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.SQL Memory Dumps Should Use a double quote after the Describe" time="0.0088" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="SQL Memory Dumps should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.SQL Memory Dumps should use a plural for tags" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MemoryDump should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.MemoryDump should be Singular" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag MemoryDump should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.The first Tag MemoryDump should be in the unique Tags returned from Get-DbcCheck" time="0.0079" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Supported Build Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.Supported Build Should Use a double quote after the Describe" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Supported Build should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.Supported Build should use a plural for tags" time="0.0072" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="SupportedBuild should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.SupportedBuild should be Singular" time="0.0079" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="DISA should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.DISA should be Singular" time="0.0078" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag SupportedBuild should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.The first Tag SupportedBuild should be in the unique Tags returned from Get-DbcCheck" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="SA Login Renamed Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.SA Login Renamed Should Use a double quote after the Describe" time="0.0113" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="SA Login Renamed should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.SA Login Renamed should use a plural for tags" time="0.0079" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="SaRenamed should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.SaRenamed should be Singular" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="DISA should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.DISA should be Singular" time="0.0069" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag SaRenamed should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.The first Tag SaRenamed should be in the unique Tags returned from Get-DbcCheck" time="0.0081" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Default Backup Compression Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.Default Backup Compression Should Use a double quote after the Describe" time="0.0087" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Default Backup Compression should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.Default Backup Compression should use a plural for tags" time="0.0072" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="DefaultBackupCompression should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.DefaultBackupCompression should be Singular" time="0.0069" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag DefaultBackupCompression should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.The first Tag DefaultBackupCompression should be in the unique Tags returned from Get-DbcCheck" time="0.0083" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="XE Sessions That should be Stopped Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.XE Sessions That should be Stopped Should Use a double quote after the Describe" time="0.0083" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="XE Sessions That should be Stopped should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.XE Sessions That should be Stopped should use a plural for tags" time="0.008" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="XESessionStopped should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.XESessionStopped should be Singular" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ExtendedEvent should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.ExtendedEvent should be Singular" time="0.0072" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag XESessionStopped should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.The first Tag XESessionStopped should be in the unique Tags returned from Get-DbcCheck" time="0.0094" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="XE Sessions That should be Running Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.XE Sessions That should be Running Should Use a double quote after the Describe" time="0.0089" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="XE Sessions That should be Running should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.XE Sessions That should be Running should use a plural for tags" time="0.0136" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="XESessionRunning should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.XESessionRunning should be Singular" time="0.0079" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ExtendedEvent should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.ExtendedEvent should be Singular" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag XESessionRunning should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.The first Tag XESessionRunning should be in the unique Tags returned from Get-DbcCheck" time="0.0082" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="XE Sessions That Are Allowed to Be Running Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.XE Sessions That Are Allowed to Be Running Should Use a double quote after the Describe" time="0.0085" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="XE Sessions That Are Allowed to Be Running should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.XE Sessions That Are Allowed to Be Running should use a plural for tags" time="0.0081" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="XESessionRunningAllowed should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.XESessionRunningAllowed should be Singular" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ExtendedEvent should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.ExtendedEvent should be Singular" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag XESessionRunningAllowed should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.The first Tag XESessionRunningAllowed should be in the unique Tags returned from Get-DbcCheck" time="0.0088" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OLE Automation Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.OLE Automation Should Use a double quote after the Describe" time="0.0083" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OLE Automation should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.OLE Automation should use a plural for tags" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OLEAutomation should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.OLEAutomation should be Singular" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="security should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.security should be Singular" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag OLEAutomation should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.The first Tag OLEAutomation should be in the unique Tags returned from Get-DbcCheck" time="0.0082" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="sp_whoisactive is Installed Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.sp_whoisactive is Installed Should Use a double quote after the Describe" time="0.009" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="sp_whoisactive is Installed should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.sp_whoisactive is Installed should use a plural for tags" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="WhoIsActiveInstalled should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.WhoIsActiveInstalled should be Singular" time="0.0107" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag WhoIsActiveInstalled should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.The first Tag WhoIsActiveInstalled should be in the unique Tags returned from Get-DbcCheck" time="0.0083" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Model Database Growth Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.Model Database Growth Should Use a double quote after the Describe" time="0.0085" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Model Database Growth should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.Model Database Growth should use a plural for tags" time="0.0086" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ModelDbGrowth should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.ModelDbGrowth should be Singular" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag ModelDbGrowth should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.The first Tag ModelDbGrowth should be in the unique Tags returned from Get-DbcCheck" time="0.0081" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ad Users and Groups  Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.Ad Users and Groups  Should Use a double quote after the Describe" time="0.0082" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ad Users and Groups  should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.Ad Users and Groups  should use a plural for tags" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ADUser should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.ADUser should be Singular" time="0.007" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Domain should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.Domain should be Singular" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag ADUser should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.The first Tag ADUser should be in the unique Tags returned from Get-DbcCheck" time="0.0084" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Error Log Entries Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.Error Log Entries Should Use a double quote after the Describe" time="0.0085" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Error Log Entries should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.Error Log Entries should use a plural for tags" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ErrorLog should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.ErrorLog should be Singular" time="0.0083" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag ErrorLog should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.The first Tag ErrorLog should be in the unique Tags returned from Get-DbcCheck" time="0.0091" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Error Log Count Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.Error Log Count Should Use a double quote after the Describe" time="0.0123" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Error Log Count should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.Error Log Count should use a plural for tags" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ErrorLogCount should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.ErrorLogCount should be Singular" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag ErrorLogCount should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.The first Tag ErrorLogCount should be in the unique Tags returned from Get-DbcCheck" time="0.0078" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Instance MaxDop Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.Instance MaxDop Should Use a double quote after the Describe" time="0.0082" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Instance MaxDop should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.Instance MaxDop should use a plural for tags" time="0.0078" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MaxDopInstance should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.MaxDopInstance should be Singular" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MaxDop should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.MaxDop should be Singular" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag MaxDopInstance should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.The first Tag MaxDopInstance should be in the unique Tags returned from Get-DbcCheck" time="0.0117" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Two Digit Year Cutoff Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.Two Digit Year Cutoff Should Use a double quote after the Describe" time="0.0086" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Two Digit Year Cutoff should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.Two Digit Year Cutoff should use a plural for tags" time="0.0078" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="TwoDigitYearCutoff should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.TwoDigitYearCutoff should be Singular" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag TwoDigitYearCutoff should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.The first Tag TwoDigitYearCutoff should be in the unique Tags returned from Get-DbcCheck" time="0.0083" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Trace Flags Expected Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.Trace Flags Expected Should Use a double quote after the Describe" time="0.0087" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Trace Flags Expected should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.Trace Flags Expected should use a plural for tags" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="TraceFlagsExpected should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.TraceFlagsExpected should be Singular" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="TraceFlag should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.TraceFlag should be Singular" time="0.0112" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag TraceFlagsExpected should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.The first Tag TraceFlagsExpected should be in the unique Tags returned from Get-DbcCheck" time="0.008" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Trace Flags Not Expected Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.Trace Flags Not Expected Should Use a double quote after the Describe" time="0.0084" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Trace Flags Not Expected should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.Trace Flags Not Expected should use a plural for tags" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="TraceFlagsNotExpected should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.TraceFlagsNotExpected should be Singular" time="0.0069" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="TraceFlag should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.TraceFlag should be Singular" time="0.0081" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag TraceFlagsNotExpected should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.The first Tag TraceFlagsNotExpected should be in the unique Tags returned from Get-DbcCheck" time="0.0078" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="CLR Enabled Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.CLR Enabled Should Use a double quote after the Describe" time="0.0081" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="CLR Enabled should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.CLR Enabled should use a plural for tags" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="CLREnabled should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.CLREnabled should be Singular" time="0.0079" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="security should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.security should be Singular" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag CLREnabled should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.The first Tag CLREnabled should be in the unique Tags returned from Get-DbcCheck" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Cross Database Ownership Chaining Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.Cross Database Ownership Chaining Should Use a double quote after the Describe" time="0.0085" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Cross Database Ownership Chaining should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.Cross Database Ownership Chaining should use a plural for tags" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="CrossDBOwnershipChaining should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.CrossDBOwnershipChaining should be Singular" time="0.0072" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="security should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.security should be Singular" time="0.0113" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag CrossDBOwnershipChaining should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.The first Tag CrossDBOwnershipChaining should be in the unique Tags returned from Get-DbcCheck" time="0.0096" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ad Hoc Distributed Queries Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.Ad Hoc Distributed Queries Should Use a double quote after the Describe" time="0.0081" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ad Hoc Distributed Queries should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.Ad Hoc Distributed Queries should use a plural for tags" time="0.007" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdHocDistributedQueriesEnabled should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.AdHocDistributedQueriesEnabled should be Singular" time="0.0078" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="security should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.security should be Singular" time="0.008" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag AdHocDistributedQueriesEnabled should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.The first Tag AdHocDistributedQueriesEnabled should be in the unique Tags returned from Get-DbcCheck" time="0.01" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="XP CmdShell Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.XP CmdShell Should Use a double quote after the Describe" time="0.0097" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="XP CmdShell should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.XP CmdShell should use a plural for tags" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="XpCmdShellDisabled should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.XpCmdShellDisabled should be Singular" time="0.0078" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="security should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.security should be Singular" time="0.0072" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag XpCmdShellDisabled should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.The first Tag XpCmdShellDisabled should be in the unique Tags returned from Get-DbcCheck" time="0.0082" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="SQL Browser Service Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.SQL Browser Service Should Use a double quote after the Describe" time="0.0083" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="SQL Browser Service should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.SQL Browser Service should use a plural for tags" time="0.0081" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="SqlBrowserServiceAccount should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.SqlBrowserServiceAccount should be Singular" time="0.0088" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ServiceAccount should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.ServiceAccount should be Singular" time="0.011" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag SqlBrowserServiceAccount should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Describes titles and tags.The first Tag SqlBrowserServiceAccount should be in the unique Tags returned from Get-DbcCheck" time="0.0082" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Instance.Tests.ps1 - Checking Contexts" executed="True" result="Success" success="True" time="0.6265" asserts="0" description="Instance.Tests.ps1 - Checking Contexts">
                <results>
                  <test-case description="Testing Instance Connection on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Contexts.Testing Instance Connection on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0925" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing Instance Connection on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Contexts.Testing Instance Connection on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.016" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing database collation on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Contexts.Testing database collation on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0078" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing SQL Engine Service on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Contexts.Testing SQL Engine Service on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0078" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing TempDB Configuration on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Contexts.Testing TempDB Configuration on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0069" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing TempDB Configuration on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Contexts.Testing TempDB Configuration on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing Ad Hoc Workload Optimization on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Contexts.Testing Ad Hoc Workload Optimization on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0072" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing Ad Hoc Workload Optimization on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Contexts.Testing Ad Hoc Workload Optimization on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing Backup Path Access on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Contexts.Testing Backup Path Access on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing Backup Path Access on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Contexts.Testing Backup Path Access on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0081" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing Dedicated Administrator Connection on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Contexts.Testing Dedicated Administrator Connection on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing Dedicated Administrator Connection on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Contexts.Testing Dedicated Administrator Connection on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0078" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing Network Latency on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Contexts.Testing Network Latency on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing Network Latency on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Contexts.Testing Network Latency on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0066" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing Linked Servers on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Contexts.Testing Linked Servers on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.008" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing Linked Servers on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Contexts.Testing Linked Servers on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing Max Memory on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Contexts.Testing Max Memory on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0069" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing Max Memory on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Contexts.Testing Max Memory on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0069" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Checking for orphaned database files on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Contexts.Checking for orphaned database files on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0069" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Checking for orphaned database files on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Contexts.Checking for orphaned database files on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing instance name matches Windows name for $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Contexts.Testing instance name matches Windows name for $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing instance name matches Windows name for $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Contexts.Testing instance name matches Windows name for $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0093" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Checking that dumps on $psitem do not exceed $maxdumps for $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Contexts.Checking that dumps on $psitem do not exceed $maxdumps for $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Checking that dumps on $psitem do not exceed $maxdumps for $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Contexts.Checking that dumps on $psitem do not exceed $maxdumps for $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0103" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Checking that build is still supportedby Microsoft for $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Contexts.Checking that build is still supportedby Microsoft for $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Checking that build is still supportedby Microsoft for $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Contexts.Checking that build is still supportedby Microsoft for $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Checking that sa login has been renamed on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Contexts.Checking that sa login has been renamed on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Checking that sa login has been renamed on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Contexts.Checking that sa login has been renamed on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing Default Backup Compression on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Contexts.Testing Default Backup Compression on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing Default Backup Compression on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Contexts.Testing Default Backup Compression on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Checking sessions on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Contexts.Checking sessions on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0078" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Checking sessions on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Contexts.Checking sessions on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Checking running sessions on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Contexts.Checking running sessions on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0081" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Checking running sessions on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Contexts.Checking running sessions on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0072" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Checking sessions on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Contexts.Checking sessions on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0072" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Checking sessions on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Contexts.Checking sessions on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0072" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing OLE Automation on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Contexts.Testing OLE Automation on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing OLE Automation on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Contexts.Testing OLE Automation on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0112" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing WhoIsActive exists on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Contexts.Testing WhoIsActive exists on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0102" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing WhoIsActive exists on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Contexts.Testing WhoIsActive exists on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing model database growth setting is not default on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Contexts.Testing model database growth setting is not default on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0116" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing model database growth setting is not default on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Contexts.Testing model database growth setting is not default on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0083" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing active Directory users on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Contexts.Testing active Directory users on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0078" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing active Directory groups on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Contexts.Testing active Directory groups on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0072" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing active Directory users on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Contexts.Testing active Directory users on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0082" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing active Directory groups on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Contexts.Testing active Directory groups on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Checking error log on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Contexts.Checking error log on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0078" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Checking error log on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Contexts.Checking error log on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0084" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Checking error log count on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Contexts.Checking error log count on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0082" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Checking error log count on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Contexts.Checking error log count on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing Instance MaxDop Value on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Contexts.Testing Instance MaxDop Value on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing Instance MaxDop Value on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Contexts.Testing Instance MaxDop Value on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing Two Digit Year Cutoff on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Contexts.Testing Two Digit Year Cutoff on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0072" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing Two Digit Year Cutoff on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Contexts.Testing Two Digit Year Cutoff on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0078" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing Expected Trace Flags on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Contexts.Testing Expected Trace Flags on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0091" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing Expected Trace Flags on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Contexts.Testing Expected Trace Flags on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing Not Expected Trace Flags on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Contexts.Testing Not Expected Trace Flags on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0105" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing Not Expected Trace Flags on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Contexts.Testing Not Expected Trace Flags on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0083" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing CLR Enabled on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Contexts.Testing CLR Enabled on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing CLR Enabled on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Contexts.Testing CLR Enabled on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing Cross Database Ownership Chaining on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Contexts.Testing Cross Database Ownership Chaining on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing Cross Database Ownership Chaining on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Contexts.Testing Cross Database Ownership Chaining on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0068" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing Ad Hoc Distributed Queries on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Contexts.Testing Ad Hoc Distributed Queries on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.008" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing Ad Hoc Distributed Queries on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Contexts.Testing Ad Hoc Distributed Queries on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0089" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing XP CmdShell on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Contexts.Testing XP CmdShell on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0078" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing XP CmdShell on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Contexts.Testing XP CmdShell on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing SQL Browser Service on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Contexts.Testing SQL Browser Service on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing SQL Browser Service on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Contexts.Testing SQL Browser Service on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0072" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Instance.Tests.ps1 - Checking Code" executed="True" result="Success" success="True" time="0.0924" asserts="0" description="Instance.Tests.ps1 - Checking Code">
                <results>
                  <test-case description="Instance Connection Should Use Get-Instance or Get-ComputerName" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Code.Instance Connection Should Use Get-Instance or Get-ComputerName" time="0.0337" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Instance Connection Should use the ForEach Method" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Code.Instance Connection Should use the ForEach Method" time="0.0135" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Instance Connection Should not use $_" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Code.Instance Connection Should not use $_" time="0.0082" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Instance Connection Should Contain a Context Block" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Code.Instance Connection Should Contain a Context Block" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="SQL Browser Service Should Use Get-Instance or Get-ComputerName" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Code.SQL Browser Service Should Use Get-Instance or Get-ComputerName" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="SQL Browser Service Should use the ForEach Method" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Code.SQL Browser Service Should use the ForEach Method" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="SQL Browser Service Should not use $_" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Code.SQL Browser Service Should not use $_" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="SQL Browser Service Should Contain a Context Block" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Instance.Tests.ps1 - Checking Code.SQL Browser Service Should Contain a Context Block" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="LogShipping.Tests.ps1 - Checking Describes titles and tags" executed="True" result="Success" success="True" time="0.2052" asserts="0" description="LogShipping.Tests.ps1 - Checking Describes titles and tags">
                <results>
                  <test-case description="Log Shipping Status Primary Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.LogShipping.Tests.ps1 - Checking Describes titles and tags.Log Shipping Status Primary Should Use a double quote after the Describe" time="0.1494" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Log Shipping Status Primary should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.LogShipping.Tests.ps1 - Checking Describes titles and tags.Log Shipping Status Primary should use a plural for tags" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="LogShippingPrimary should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.LogShipping.Tests.ps1 - Checking Describes titles and tags.LogShippingPrimary should be Singular" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag LogShippingPrimary should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.LogShipping.Tests.ps1 - Checking Describes titles and tags.The first Tag LogShippingPrimary should be in the unique Tags returned from Get-DbcCheck" time="0.0083" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Log Shipping Status Secondary Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.LogShipping.Tests.ps1 - Checking Describes titles and tags.Log Shipping Status Secondary Should Use a double quote after the Describe" time="0.0079" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Log Shipping Status Secondary should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.LogShipping.Tests.ps1 - Checking Describes titles and tags.Log Shipping Status Secondary should use a plural for tags" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="LogShippingSecondary should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.LogShipping.Tests.ps1 - Checking Describes titles and tags.LogShippingSecondary should be Singular" time="0.0082" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag LogShippingSecondary should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.LogShipping.Tests.ps1 - Checking Describes titles and tags.The first Tag LogShippingSecondary should be in the unique Tags returned from Get-DbcCheck" time="0.0091" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="LogShipping.Tests.ps1 - Checking Contexts" executed="True" result="Success" success="True" time="0.0484" asserts="0" description="LogShipping.Tests.ps1 - Checking Contexts">
                <results>
                  <test-case description="Testing the primary databases on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.LogShipping.Tests.ps1 - Checking Contexts.Testing the primary databases on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0411" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing the secondary databases on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.LogShipping.Tests.ps1 - Checking Contexts.Testing the secondary databases on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="LogShipping.Tests.ps1 - Checking Code" executed="True" result="Success" success="True" time="0.0774" asserts="0" description="LogShipping.Tests.ps1 - Checking Code">
                <results>
                  <test-case description="Log Shipping Status Primary Should Use Get-Instance or Get-ComputerName" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.LogShipping.Tests.ps1 - Checking Code.Log Shipping Status Primary Should Use Get-Instance or Get-ComputerName" time="0.0284" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Log Shipping Status Primary Should use the ForEach Method" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.LogShipping.Tests.ps1 - Checking Code.Log Shipping Status Primary Should use the ForEach Method" time="0.0066" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Log Shipping Status Primary Should not use $_" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.LogShipping.Tests.ps1 - Checking Code.Log Shipping Status Primary Should not use $_" time="0.007" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Log Shipping Status Primary Should Contain a Context Block" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.LogShipping.Tests.ps1 - Checking Code.Log Shipping Status Primary Should Contain a Context Block" time="0.0079" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Log Shipping Status Secondary Should Use Get-Instance or Get-ComputerName" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.LogShipping.Tests.ps1 - Checking Code.Log Shipping Status Secondary Should Use Get-Instance or Get-ComputerName" time="0.0068" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Log Shipping Status Secondary Should use the ForEach Method" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.LogShipping.Tests.ps1 - Checking Code.Log Shipping Status Secondary Should use the ForEach Method" time="0.0067" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Log Shipping Status Secondary Should not use $_" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.LogShipping.Tests.ps1 - Checking Code.Log Shipping Status Secondary Should not use $_" time="0.0064" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Log Shipping Status Secondary Should Contain a Context Block" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.LogShipping.Tests.ps1 - Checking Code.Log Shipping Status Secondary Should Contain a Context Block" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="MaintenanceSolution.Tests.ps1 - Checking Describes titles and tags" executed="True" result="Success" success="True" time="0.5612" asserts="0" description="MaintenanceSolution.Tests.ps1 - Checking Describes titles and tags">
                <results>
                  <test-case description="Ola maintenance solution installed Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Describes titles and tags.Ola maintenance solution installed Should Use a double quote after the Describe" time="0.1806" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ola maintenance solution installed should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Describes titles and tags.Ola maintenance solution installed should use a plural for tags" time="0.008" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OlaInstalled should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Describes titles and tags.OlaInstalled should be Singular" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag OlaInstalled should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Describes titles and tags.The first Tag OlaInstalled should be in the unique Tags returned from Get-DbcCheck" time="0.0084" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ola - $SysFullJobName Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Describes titles and tags.Ola - $SysFullJobName Should Use a double quote after the Describe" time="0.0084" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ola - $SysFullJobName should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Describes titles and tags.Ola - $SysFullJobName should use a plural for tags" time="0.0078" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="SystemFull should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Describes titles and tags.SystemFull should be Singular" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag SystemFull should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Describes titles and tags.The first Tag SystemFull should be in the unique Tags returned from Get-DbcCheck" time="0.0083" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ola - $UserFullJobName Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Describes titles and tags.Ola - $UserFullJobName Should Use a double quote after the Describe" time="0.0082" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ola - $UserFullJobName should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Describes titles and tags.Ola - $UserFullJobName should use a plural for tags" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="UserFull should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Describes titles and tags.UserFull should be Singular" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag UserFull should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Describes titles and tags.The first Tag UserFull should be in the unique Tags returned from Get-DbcCheck" time="0.0114" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ola - $UserDiffJobName Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Describes titles and tags.Ola - $UserDiffJobName Should Use a double quote after the Describe" time="0.008" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ola - $UserDiffJobName should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Describes titles and tags.Ola - $UserDiffJobName should use a plural for tags" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="UserDiff should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Describes titles and tags.UserDiff should be Singular" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag UserDiff should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Describes titles and tags.The first Tag UserDiff should be in the unique Tags returned from Get-DbcCheck" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ola - $UserLogJobName Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Describes titles and tags.Ola - $UserLogJobName Should Use a double quote after the Describe" time="0.0086" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ola - $UserLogJobName should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Describes titles and tags.Ola - $UserLogJobName should use a plural for tags" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="UserLog should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Describes titles and tags.UserLog should be Singular" time="0.0089" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag UserLog should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Describes titles and tags.The first Tag UserLog should be in the unique Tags returned from Get-DbcCheck" time="0.0087" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ola - $CommandLogJobName Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Describes titles and tags.Ola - $CommandLogJobName Should Use a double quote after the Describe" time="0.0143" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ola - $CommandLogJobName should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Describes titles and tags.Ola - $CommandLogJobName should use a plural for tags" time="0.0069" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="CommandLog should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Describes titles and tags.CommandLog should be Singular" time="0.0078" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag CommandLog should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Describes titles and tags.The first Tag CommandLog should be in the unique Tags returned from Get-DbcCheck" time="0.0081" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ola - $SysIntegrityJobName Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Describes titles and tags.Ola - $SysIntegrityJobName Should Use a double quote after the Describe" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ola - $SysIntegrityJobName should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Describes titles and tags.Ola - $SysIntegrityJobName should use a plural for tags" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="SystemIntegrityCheck should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Describes titles and tags.SystemIntegrityCheck should be Singular" time="0.01" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag SystemIntegrityCheck should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Describes titles and tags.The first Tag SystemIntegrityCheck should be in the unique Tags returned from Get-DbcCheck" time="0.0079" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ola - $UserIntegrityJobName Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Describes titles and tags.Ola - $UserIntegrityJobName Should Use a double quote after the Describe" time="0.008" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ola - $UserIntegrityJobName should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Describes titles and tags.Ola - $UserIntegrityJobName should use a plural for tags" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="UserIntegrityCheck should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Describes titles and tags.UserIntegrityCheck should be Singular" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag UserIntegrityCheck should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Describes titles and tags.The first Tag UserIntegrityCheck should be in the unique Tags returned from Get-DbcCheck" time="0.0086" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ola - $UserIndexJobName Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Describes titles and tags.Ola - $UserIndexJobName Should Use a double quote after the Describe" time="0.008" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ola - $UserIndexJobName should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Describes titles and tags.Ola - $UserIndexJobName should use a plural for tags" time="0.0068" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="UserIndexOptimize should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Describes titles and tags.UserIndexOptimize should be Singular" time="0.0066" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag UserIndexOptimize should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Describes titles and tags.The first Tag UserIndexOptimize should be in the unique Tags returned from Get-DbcCheck" time="0.0085" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ola - $OutputFileJobName Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Describes titles and tags.Ola - $OutputFileJobName Should Use a double quote after the Describe" time="0.0086" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ola - $OutputFileJobName should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Describes titles and tags.Ola - $OutputFileJobName should use a plural for tags" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OutputFileCleanup should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Describes titles and tags.OutputFileCleanup should be Singular" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag OutputFileCleanup should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Describes titles and tags.The first Tag OutputFileCleanup should be in the unique Tags returned from Get-DbcCheck" time="0.0084" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ola - $DeleteBackupJobName Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Describes titles and tags.Ola - $DeleteBackupJobName Should Use a double quote after the Describe" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ola - $DeleteBackupJobName should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Describes titles and tags.Ola - $DeleteBackupJobName should use a plural for tags" time="0.0097" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="DeleteBackupHistory should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Describes titles and tags.DeleteBackupHistory should be Singular" time="0.0069" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag DeleteBackupHistory should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Describes titles and tags.The first Tag DeleteBackupHistory should be in the unique Tags returned from Get-DbcCheck" time="0.008" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ola - $PurgeBackupJobName Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Describes titles and tags.Ola - $PurgeBackupJobName Should Use a double quote after the Describe" time="0.0082" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ola - $PurgeBackupJobName should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Describes titles and tags.Ola - $PurgeBackupJobName should use a plural for tags" time="0.0078" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="PurgeJobHistory should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Describes titles and tags.PurgeJobHistory should be Singular" time="0.0072" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag PurgeJobHistory should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Describes titles and tags.The first Tag PurgeJobHistory should be in the unique Tags returned from Get-DbcCheck" time="0.0078" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="MaintenanceSolution.Tests.ps1 - Checking Contexts" executed="True" result="Success" success="True" time="0.2951" asserts="0" description="MaintenanceSolution.Tests.ps1 - Checking Contexts">
                <results>
                  <test-case description="Checking the CommandLog table on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Contexts.Checking the CommandLog table on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.068" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Checking the Ola Stored Procedures on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Contexts.Checking the Ola Stored Procedures on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.007" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Is job enabled on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Contexts.Is job enabled on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Is job scheduled on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Contexts.Is job scheduled on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Checking the backup retention on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Contexts.Checking the backup retention on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Is job enabled on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Contexts.Is job enabled on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Is job scheduled on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Contexts.Is job scheduled on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0069" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Checking the backup retention on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Contexts.Checking the backup retention on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Is job enabled on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Contexts.Is job enabled on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0072" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Is job scheduled on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Contexts.Is job scheduled on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Checking the backup retention on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Contexts.Checking the backup retention on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0068" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Is job enabled on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Contexts.Is job enabled on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0068" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Is job scheduled on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Contexts.Is job scheduled on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0068" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Checking the backup retention on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Contexts.Checking the backup retention on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0069" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Is job enabled on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Contexts.Is job enabled on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Is job scheduled on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Contexts.Is job scheduled on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0078" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Checking the Command Log Cleanup Time on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Contexts.Checking the Command Log Cleanup Time on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0123" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Is job enabled on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Contexts.Is job enabled on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0066" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Is job scheduled on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Contexts.Is job scheduled on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0066" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Is job enabled on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Contexts.Is job enabled on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0065" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Is job scheduled on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Contexts.Is job scheduled on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Is job enabled on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Contexts.Is job enabled on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Is job scheduled on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Contexts.Is job scheduled on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Is job enabled on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Contexts.Is job enabled on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Is job scheduled on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Contexts.Is job scheduled on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0072" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Checking the Output File Job Cleanup Time on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Contexts.Checking the Output File Job Cleanup Time on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0069" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Is job enabled on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Contexts.Is job enabled on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0069" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Is job scheduled on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Contexts.Is job scheduled on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Checking the Delete Backup History Cleanup Time on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Contexts.Checking the Delete Backup History Cleanup Time on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.008" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Is job enabled on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Contexts.Is job enabled on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Is job scheduled on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Contexts.Is job scheduled on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Checking the Purge Backup History Cleanup Time on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Contexts.Checking the Purge Backup History Cleanup Time on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="MaintenanceSolution.Tests.ps1 - Checking Code" executed="True" result="Success" success="True" time="0.4128" asserts="0" description="MaintenanceSolution.Tests.ps1 - Checking Code">
                <results>
                  <test-case description="Ola maintenance solution installed Should Use Get-Instance or Get-ComputerName" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Code.Ola maintenance solution installed Should Use Get-Instance or Get-ComputerName" time="0.0356" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ola maintenance solution installed Should use the ForEach Method" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Code.Ola maintenance solution installed Should use the ForEach Method" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ola maintenance solution installed Should not use $_" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Code.Ola maintenance solution installed Should not use $_" time="0.009" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ola maintenance solution installed Should Contain a Context Block" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Code.Ola maintenance solution installed Should Contain a Context Block" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ola - $SysFullJobName Should Use Get-Instance or Get-ComputerName" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Code.Ola - $SysFullJobName Should Use Get-Instance or Get-ComputerName" time="0.0079" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ola - $SysFullJobName Should use the ForEach Method" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Code.Ola - $SysFullJobName Should use the ForEach Method" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ola - $SysFullJobName Should not use $_" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Code.Ola - $SysFullJobName Should not use $_" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ola - $SysFullJobName Should Contain a Context Block" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Code.Ola - $SysFullJobName Should Contain a Context Block" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ola - $UserFullJobName Should Use Get-Instance or Get-ComputerName" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Code.Ola - $UserFullJobName Should Use Get-Instance or Get-ComputerName" time="0.0069" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ola - $UserFullJobName Should use the ForEach Method" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Code.Ola - $UserFullJobName Should use the ForEach Method" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ola - $UserFullJobName Should not use $_" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Code.Ola - $UserFullJobName Should not use $_" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ola - $UserFullJobName Should Contain a Context Block" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Code.Ola - $UserFullJobName Should Contain a Context Block" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ola - $UserDiffJobName Should Use Get-Instance or Get-ComputerName" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Code.Ola - $UserDiffJobName Should Use Get-Instance or Get-ComputerName" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ola - $UserDiffJobName Should use the ForEach Method" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Code.Ola - $UserDiffJobName Should use the ForEach Method" time="0.0147" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ola - $UserDiffJobName Should not use $_" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Code.Ola - $UserDiffJobName Should not use $_" time="0.0068" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ola - $UserDiffJobName Should Contain a Context Block" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Code.Ola - $UserDiffJobName Should Contain a Context Block" time="0.0069" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ola - $UserLogJobName Should Use Get-Instance or Get-ComputerName" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Code.Ola - $UserLogJobName Should Use Get-Instance or Get-ComputerName" time="0.0093" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ola - $UserLogJobName Should use the ForEach Method" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Code.Ola - $UserLogJobName Should use the ForEach Method" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ola - $UserLogJobName Should not use $_" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Code.Ola - $UserLogJobName Should not use $_" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ola - $UserLogJobName Should Contain a Context Block" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Code.Ola - $UserLogJobName Should Contain a Context Block" time="0.008" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ola - $CommandLogJobName Should Use Get-Instance or Get-ComputerName" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Code.Ola - $CommandLogJobName Should Use Get-Instance or Get-ComputerName" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ola - $CommandLogJobName Should use the ForEach Method" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Code.Ola - $CommandLogJobName Should use the ForEach Method" time="0.0082" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ola - $CommandLogJobName Should not use $_" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Code.Ola - $CommandLogJobName Should not use $_" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ola - $CommandLogJobName Should Contain a Context Block" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Code.Ola - $CommandLogJobName Should Contain a Context Block" time="0.008" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ola - $SysIntegrityJobName Should Use Get-Instance or Get-ComputerName" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Code.Ola - $SysIntegrityJobName Should Use Get-Instance or Get-ComputerName" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ola - $SysIntegrityJobName Should use the ForEach Method" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Code.Ola - $SysIntegrityJobName Should use the ForEach Method" time="0.0078" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ola - $SysIntegrityJobName Should not use $_" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Code.Ola - $SysIntegrityJobName Should not use $_" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ola - $SysIntegrityJobName Should Contain a Context Block" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Code.Ola - $SysIntegrityJobName Should Contain a Context Block" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ola - $UserIntegrityJobName Should Use Get-Instance or Get-ComputerName" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Code.Ola - $UserIntegrityJobName Should Use Get-Instance or Get-ComputerName" time="0.007" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ola - $UserIntegrityJobName Should use the ForEach Method" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Code.Ola - $UserIntegrityJobName Should use the ForEach Method" time="0.0081" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ola - $UserIntegrityJobName Should not use $_" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Code.Ola - $UserIntegrityJobName Should not use $_" time="0.0124" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ola - $UserIntegrityJobName Should Contain a Context Block" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Code.Ola - $UserIntegrityJobName Should Contain a Context Block" time="0.0072" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ola - $UserIndexJobName Should Use Get-Instance or Get-ComputerName" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Code.Ola - $UserIndexJobName Should Use Get-Instance or Get-ComputerName" time="0.0078" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ola - $UserIndexJobName Should use the ForEach Method" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Code.Ola - $UserIndexJobName Should use the ForEach Method" time="0.0078" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ola - $UserIndexJobName Should not use $_" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Code.Ola - $UserIndexJobName Should not use $_" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ola - $UserIndexJobName Should Contain a Context Block" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Code.Ola - $UserIndexJobName Should Contain a Context Block" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ola - $OutputFileJobName Should Use Get-Instance or Get-ComputerName" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Code.Ola - $OutputFileJobName Should Use Get-Instance or Get-ComputerName" time="0.007" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ola - $OutputFileJobName Should use the ForEach Method" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Code.Ola - $OutputFileJobName Should use the ForEach Method" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ola - $OutputFileJobName Should not use $_" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Code.Ola - $OutputFileJobName Should not use $_" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ola - $OutputFileJobName Should Contain a Context Block" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Code.Ola - $OutputFileJobName Should Contain a Context Block" time="0.0082" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ola - $DeleteBackupJobName Should Use Get-Instance or Get-ComputerName" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Code.Ola - $DeleteBackupJobName Should Use Get-Instance or Get-ComputerName" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ola - $DeleteBackupJobName Should use the ForEach Method" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Code.Ola - $DeleteBackupJobName Should use the ForEach Method" time="0.0078" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ola - $DeleteBackupJobName Should not use $_" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Code.Ola - $DeleteBackupJobName Should not use $_" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ola - $DeleteBackupJobName Should Contain a Context Block" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Code.Ola - $DeleteBackupJobName Should Contain a Context Block" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ola - $PurgeBackupJobName Should Use Get-Instance or Get-ComputerName" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Code.Ola - $PurgeBackupJobName Should Use Get-Instance or Get-ComputerName" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ola - $PurgeBackupJobName Should use the ForEach Method" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Code.Ola - $PurgeBackupJobName Should use the ForEach Method" time="0.0157" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ola - $PurgeBackupJobName Should not use $_" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Code.Ola - $PurgeBackupJobName Should not use $_" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ola - $PurgeBackupJobName Should Contain a Context Block" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.MaintenanceSolution.Tests.ps1 - Checking Code.Ola - $PurgeBackupJobName Should Contain a Context Block" time="0.0085" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Server.Tests.ps1 - Checking Describes titles and tags" executed="True" result="Success" success="True" time="0.368" asserts="0" description="Server.Tests.ps1 - Checking Describes titles and tags">
                <results>
                  <test-case description="Server Power Plan Configuration Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Server.Tests.ps1 - Checking Describes titles and tags.Server Power Plan Configuration Should Use a double quote after the Describe" time="0.1613" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Server Power Plan Configuration should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Server.Tests.ps1 - Checking Describes titles and tags.Server Power Plan Configuration should use a plural for tags" time="0.0083" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="PowerPlan should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Server.Tests.ps1 - Checking Describes titles and tags.PowerPlan should be Singular" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag PowerPlan should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Server.Tests.ps1 - Checking Describes titles and tags.The first Tag PowerPlan should be in the unique Tags returned from Get-DbcCheck" time="0.0078" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="SPNs Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Server.Tests.ps1 - Checking Describes titles and tags.SPNs Should Use a double quote after the Describe" time="0.0082" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="SPNs should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Server.Tests.ps1 - Checking Describes titles and tags.SPNs should use a plural for tags" time="0.0088" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="SPN should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Server.Tests.ps1 - Checking Describes titles and tags.SPN should be Singular" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag SPN should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Server.Tests.ps1 - Checking Describes titles and tags.The first Tag SPN should be in the unique Tags returned from Get-DbcCheck" time="0.0085" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Disk Space Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Server.Tests.ps1 - Checking Describes titles and tags.Disk Space Should Use a double quote after the Describe" time="0.0083" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Disk Space should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Server.Tests.ps1 - Checking Describes titles and tags.Disk Space should use a plural for tags" time="0.0069" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="DiskCapacity should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Server.Tests.ps1 - Checking Describes titles and tags.DiskCapacity should be Singular" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Storage should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Server.Tests.ps1 - Checking Describes titles and tags.Storage should be Singular" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="DISA should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Server.Tests.ps1 - Checking Describes titles and tags.DISA should be Singular" time="0.0072" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag DiskCapacity should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Server.Tests.ps1 - Checking Describes titles and tags.The first Tag DiskCapacity should be in the unique Tags returned from Get-DbcCheck" time="0.0083" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ping Computer Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Server.Tests.ps1 - Checking Describes titles and tags.Ping Computer Should Use a double quote after the Describe" time="0.0085" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Ping Computer should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Server.Tests.ps1 - Checking Describes titles and tags.Ping Computer should use a plural for tags" time="0.0118" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="PingComputer should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Server.Tests.ps1 - Checking Describes titles and tags.PingComputer should be Singular" time="0.0085" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag PingComputer should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Server.Tests.ps1 - Checking Describes titles and tags.The first Tag PingComputer should be in the unique Tags returned from Get-DbcCheck" time="0.0089" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="CPUPrioritisation Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Server.Tests.ps1 - Checking Describes titles and tags.CPUPrioritisation Should Use a double quote after the Describe" time="0.0083" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="CPUPrioritisation should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Server.Tests.ps1 - Checking Describes titles and tags.CPUPrioritisation should use a plural for tags" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="CPUPrioritisation should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Server.Tests.ps1 - Checking Describes titles and tags.CPUPrioritisation should be Singular" time="0.0119" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag CPUPrioritisation should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Server.Tests.ps1 - Checking Describes titles and tags.The first Tag CPUPrioritisation should be in the unique Tags returned from Get-DbcCheck" time="0.0079" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Disk Allocation Unit Should Use a double quote after the Describe" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Server.Tests.ps1 - Checking Describes titles and tags.Disk Allocation Unit Should Use a double quote after the Describe" time="0.0082" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Disk Allocation Unit should use a plural for tags" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Server.Tests.ps1 - Checking Describes titles and tags.Disk Allocation Unit should use a plural for tags" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="DiskAllocationUnit should be Singular" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Server.Tests.ps1 - Checking Describes titles and tags.DiskAllocationUnit should be Singular" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="The first Tag DiskAllocationUnit should be in the unique Tags returned from Get-DbcCheck" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Server.Tests.ps1 - Checking Describes titles and tags.The first Tag DiskAllocationUnit should be in the unique Tags returned from Get-DbcCheck" time="0.009" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Server.Tests.ps1 - Checking Contexts" executed="True" result="Success" success="True" time="0.0777" asserts="0" description="Server.Tests.ps1 - Checking Contexts">
                <results>
                  <test-case description="Testing Server Power Plan Configuration on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Server.Tests.ps1 - Checking Contexts.Testing Server Power Plan Configuration on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0359" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing SPNs on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Server.Tests.ps1 - Checking Contexts.Testing SPNs on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0115" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing Disk Space on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Server.Tests.ps1 - Checking Contexts.Testing Disk Space on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing Ping to $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Server.Tests.ps1 - Checking Contexts.Testing Ping to $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.008" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing CPU Prioritisation on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Server.Tests.ps1 - Checking Contexts.Testing CPU Prioritisation on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Testing disk allocation unit on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Server.Tests.ps1 - Checking Contexts.Testing disk allocation unit on $psitem Should end with $PSItem (or $clustername) So that the PowerBi will work correctly" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Server.Tests.ps1 - Checking Code" executed="True" result="Success" success="True" time="0.0504" asserts="0" description="Server.Tests.ps1 - Checking Code">
                <results>
                  <test-case description="Server Power Plan Configuration Should Use Get-Instance or Get-ComputerName" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Server.Tests.ps1 - Checking Code.Server Power Plan Configuration Should Use Get-Instance or Get-ComputerName" time="0.0294" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Server Power Plan Configuration Should use the ForEach Method" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Server.Tests.ps1 - Checking Code.Server Power Plan Configuration Should use the ForEach Method" time="0.0072" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Server Power Plan Configuration Should not use $_" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Server.Tests.ps1 - Checking Code.Server Power Plan Configuration Should not use $_" time="0.0069" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Server Power Plan Configuration Should Contain a Context Block" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Server.Tests.ps1 - Checking Code.Server Power Plan Configuration Should Contain a Context Block" time="0.0069" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.1204" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0083" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0072" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0081" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0124" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0069" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0072" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.007" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0097" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0078" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0126" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0072" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0081" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0083" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0084" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.008" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0082" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0078" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0138" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0072" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0072" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0081" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.008" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0078" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0128" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0078" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.008" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0072" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0069" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0072" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0106" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0084" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0072" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0079" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0084" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0078" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.008" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0085" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0081" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0117" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0082" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0072" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0078" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.007" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.007" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0079" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.01" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.008" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0088" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should have one Unique Tag for each check" name="Checking that each dbachecks Pester test is correctly formatted for Power Bi and Coded correctly.Should have one Unique Tag for each check" time="0.0082" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Checking that there is a description for each check" executed="True" result="Success" success="True" time="0.9121" asserts="0" description="Checking that there is a description for each check">
            <results>
              <test-case description="DatabaseMailEnabled Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.DatabaseMailEnabled Should have a description in the DbcCheckDescriptions.json" time="0.1368" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="AgentServiceAccount Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.AgentServiceAccount Should have a description in the DbcCheckDescriptions.json" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="DbaOperator Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.DbaOperator Should have a description in the DbcCheckDescriptions.json" time="0.0145" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="FailsafeOperator Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.FailsafeOperator Should have a description in the DbcCheckDescriptions.json" time="0.0079" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="DatabaseMailProfile Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.DatabaseMailProfile Should have a description in the DbcCheckDescriptions.json" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="FailedJob Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.FailedJob Should have a description in the DbcCheckDescriptions.json" time="0.0083" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="ValidJobOwner Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.ValidJobOwner Should have a description in the DbcCheckDescriptions.json" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="AgentAlert Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.AgentAlert Should have a description in the DbcCheckDescriptions.json" time="0.0079" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="DatabaseCollation Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.DatabaseCollation Should have a description in the DbcCheckDescriptions.json" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="SuspectPage Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.SuspectPage Should have a description in the DbcCheckDescriptions.json" time="0.007" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="TestLastBackup Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.TestLastBackup Should have a description in the DbcCheckDescriptions.json" time="0.0068" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="TestLastBackupVerifyOnly Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.TestLastBackupVerifyOnly Should have a description in the DbcCheckDescriptions.json" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="ValidDatabaseOwner Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.ValidDatabaseOwner Should have a description in the DbcCheckDescriptions.json" time="0.0069" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="InvalidDatabaseOwner Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.InvalidDatabaseOwner Should have a description in the DbcCheckDescriptions.json" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="LastGoodCheckDb Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.LastGoodCheckDb Should have a description in the DbcCheckDescriptions.json" time="0.0072" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="IdentityUsage Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.IdentityUsage Should have a description in the DbcCheckDescriptions.json" time="0.0072" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="RecoveryModel Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.RecoveryModel Should have a description in the DbcCheckDescriptions.json" time="0.0065" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="DuplicateIndex Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.DuplicateIndex Should have a description in the DbcCheckDescriptions.json" time="0.007" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="UnusedIndex Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.UnusedIndex Should have a description in the DbcCheckDescriptions.json" time="0.007" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="DisabledIndex Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.DisabledIndex Should have a description in the DbcCheckDescriptions.json" time="0.0121" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="DatabaseGrowthEvent Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.DatabaseGrowthEvent Should have a description in the DbcCheckDescriptions.json" time="0.0069" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="PageVerify Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.PageVerify Should have a description in the DbcCheckDescriptions.json" time="0.0065" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="AutoClose Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.AutoClose Should have a description in the DbcCheckDescriptions.json" time="0.0068" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="AutoShrink Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.AutoShrink Should have a description in the DbcCheckDescriptions.json" time="0.0068" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="LastFullBackup Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.LastFullBackup Should have a description in the DbcCheckDescriptions.json" time="0.0116" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="LastDiffBackup Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.LastDiffBackup Should have a description in the DbcCheckDescriptions.json" time="0.0128" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="LastLogBackup Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.LastLogBackup Should have a description in the DbcCheckDescriptions.json" time="0.0072" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="VirtualLogFile Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.VirtualLogFile Should have a description in the DbcCheckDescriptions.json" time="0.0072" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="LogfileCount Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.LogfileCount Should have a description in the DbcCheckDescriptions.json" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="LogfileSize Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.LogfileSize Should have a description in the DbcCheckDescriptions.json" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="FutureFileGrowth Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.FutureFileGrowth Should have a description in the DbcCheckDescriptions.json" time="0.0072" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="FileGroupBalanced Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.FileGroupBalanced Should have a description in the DbcCheckDescriptions.json" time="0.0079" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="CertificateExpiration Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.CertificateExpiration Should have a description in the DbcCheckDescriptions.json" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="AutoCreateStatistics Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.AutoCreateStatistics Should have a description in the DbcCheckDescriptions.json" time="0.0119" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="AutoUpdateStatistics Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.AutoUpdateStatistics Should have a description in the DbcCheckDescriptions.json" time="0.0118" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="AutoUpdateStatisticsAsynchronously Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.AutoUpdateStatisticsAsynchronously Should have a description in the DbcCheckDescriptions.json" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="DatafileAutoGrowthType Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.DatafileAutoGrowthType Should have a description in the DbcCheckDescriptions.json" time="0.0072" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Trustworthy Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.Trustworthy Should have a description in the DbcCheckDescriptions.json" time="0.007" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="OrphanedUser Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.OrphanedUser Should have a description in the DbcCheckDescriptions.json" time="0.0072" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="PseudoSimple Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.PseudoSimple Should have a description in the DbcCheckDescriptions.json" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="CompatibilityLevel Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.CompatibilityLevel Should have a description in the DbcCheckDescriptions.json" time="0.007" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="FKCKTrusted Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.FKCKTrusted Should have a description in the DbcCheckDescriptions.json" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="MaxDopDatabase Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.MaxDopDatabase Should have a description in the DbcCheckDescriptions.json" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="DatabaseStatus Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.DatabaseStatus Should have a description in the DbcCheckDescriptions.json" time="0.0068" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="DatabaseExists Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.DatabaseExists Should have a description in the DbcCheckDescriptions.json" time="0.008" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="DomainName Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.DomainName Should have a description in the DbcCheckDescriptions.json" time="0.0081" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="OrganizationalUnit Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.OrganizationalUnit Should have a description in the DbcCheckDescriptions.json" time="0.007" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="ClusterHealth Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.ClusterHealth Should have a description in the DbcCheckDescriptions.json" time="0.0065" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="InstanceConnection Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.InstanceConnection Should have a description in the DbcCheckDescriptions.json" time="0.0085" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="SqlEngineServiceAccount Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.SqlEngineServiceAccount Should have a description in the DbcCheckDescriptions.json" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="TempDbConfiguration Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.TempDbConfiguration Should have a description in the DbcCheckDescriptions.json" time="0.012" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="AdHocWorkload Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.AdHocWorkload Should have a description in the DbcCheckDescriptions.json" time="0.0069" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="BackupPathAccess Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.BackupPathAccess Should have a description in the DbcCheckDescriptions.json" time="0.0068" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="DAC Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.DAC Should have a description in the DbcCheckDescriptions.json" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="NetworkLatency Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.NetworkLatency Should have a description in the DbcCheckDescriptions.json" time="0.007" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="LinkedServerConnection Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.LinkedServerConnection Should have a description in the DbcCheckDescriptions.json" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="MaxMemory Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.MaxMemory Should have a description in the DbcCheckDescriptions.json" time="0.0078" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="OrphanedFile Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.OrphanedFile Should have a description in the DbcCheckDescriptions.json" time="0.007" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="ServerNameMatch Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.ServerNameMatch Should have a description in the DbcCheckDescriptions.json" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="MemoryDump Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.MemoryDump Should have a description in the DbcCheckDescriptions.json" time="0.0069" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="SupportedBuild Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.SupportedBuild Should have a description in the DbcCheckDescriptions.json" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="SaRenamed Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.SaRenamed Should have a description in the DbcCheckDescriptions.json" time="0.0072" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="DefaultBackupCompression Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.DefaultBackupCompression Should have a description in the DbcCheckDescriptions.json" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="XESessionStopped Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.XESessionStopped Should have a description in the DbcCheckDescriptions.json" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="XESessionRunning Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.XESessionRunning Should have a description in the DbcCheckDescriptions.json" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="XESessionRunningAllowed Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.XESessionRunningAllowed Should have a description in the DbcCheckDescriptions.json" time="0.0079" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="OLEAutomation Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.OLEAutomation Should have a description in the DbcCheckDescriptions.json" time="0.0124" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="WhoIsActiveInstalled Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.WhoIsActiveInstalled Should have a description in the DbcCheckDescriptions.json" time="0.007" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="ModelDbGrowth Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.ModelDbGrowth Should have a description in the DbcCheckDescriptions.json" time="0.0067" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="ADUser Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.ADUser Should have a description in the DbcCheckDescriptions.json" time="0.0066" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="ErrorLog Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.ErrorLog Should have a description in the DbcCheckDescriptions.json" time="0.0066" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="ErrorLogCount Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.ErrorLogCount Should have a description in the DbcCheckDescriptions.json" time="0.007" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="MaxDopInstance Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.MaxDopInstance Should have a description in the DbcCheckDescriptions.json" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="TwoDigitYearCutoff Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.TwoDigitYearCutoff Should have a description in the DbcCheckDescriptions.json" time="0.0072" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="TraceFlagsExpected Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.TraceFlagsExpected Should have a description in the DbcCheckDescriptions.json" time="0.0078" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="TraceFlagsNotExpected Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.TraceFlagsNotExpected Should have a description in the DbcCheckDescriptions.json" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="CLREnabled Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.CLREnabled Should have a description in the DbcCheckDescriptions.json" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="CrossDBOwnershipChaining Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.CrossDBOwnershipChaining Should have a description in the DbcCheckDescriptions.json" time="0.007" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="AdHocDistributedQueriesEnabled Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.AdHocDistributedQueriesEnabled Should have a description in the DbcCheckDescriptions.json" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="XpCmdShellDisabled Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.XpCmdShellDisabled Should have a description in the DbcCheckDescriptions.json" time="0.0072" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="SqlBrowserServiceAccount Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.SqlBrowserServiceAccount Should have a description in the DbcCheckDescriptions.json" time="0.0068" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="LogShippingPrimary Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.LogShippingPrimary Should have a description in the DbcCheckDescriptions.json" time="0.0069" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="LogShippingSecondary Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.LogShippingSecondary Should have a description in the DbcCheckDescriptions.json" time="0.0117" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="OlaInstalled Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.OlaInstalled Should have a description in the DbcCheckDescriptions.json" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="SystemFull Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.SystemFull Should have a description in the DbcCheckDescriptions.json" time="0.0069" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="UserFull Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.UserFull Should have a description in the DbcCheckDescriptions.json" time="0.0072" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="UserDiff Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.UserDiff Should have a description in the DbcCheckDescriptions.json" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="UserLog Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.UserLog Should have a description in the DbcCheckDescriptions.json" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="CommandLog Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.CommandLog Should have a description in the DbcCheckDescriptions.json" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="SystemIntegrityCheck Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.SystemIntegrityCheck Should have a description in the DbcCheckDescriptions.json" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="UserIntegrityCheck Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.UserIntegrityCheck Should have a description in the DbcCheckDescriptions.json" time="0.0068" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="UserIndexOptimize Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.UserIndexOptimize Should have a description in the DbcCheckDescriptions.json" time="0.0072" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="OutputFileCleanup Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.OutputFileCleanup Should have a description in the DbcCheckDescriptions.json" time="0.007" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="DeleteBackupHistory Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.DeleteBackupHistory Should have a description in the DbcCheckDescriptions.json" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="PurgeJobHistory Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.PurgeJobHistory Should have a description in the DbcCheckDescriptions.json" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="PowerPlan Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.PowerPlan Should have a description in the DbcCheckDescriptions.json" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="SPN Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.SPN Should have a description in the DbcCheckDescriptions.json" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="DiskCapacity Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.DiskCapacity Should have a description in the DbcCheckDescriptions.json" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="PingComputer Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.PingComputer Should have a description in the DbcCheckDescriptions.json" time="0.0132" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="CPUPrioritisation Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.CPUPrioritisation Should have a description in the DbcCheckDescriptions.json" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="DiskAllocationUnit Should have a description in the DbcCheckDescriptions.json" name="Checking that there is a description for each check.DiskAllocationUnit Should have a description in the DbcCheckDescriptions.json" time="0.0072" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Each Config referenced in a check should exist" executed="True" result="Success" success="True" time="1.2998" asserts="0" description="Each Config referenced in a check should exist">
            <results>
              <test-case description="Config Value agent.alert.Job Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value agent.alert.Job Should exist in Get-DbcConfig" time="0.1679" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value agent.alert.messageid Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value agent.alert.messageid Should exist in Get-DbcConfig" time="0.0082" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value agent.alert.Notification Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value agent.alert.Notification Should exist in Get-DbcConfig" time="0.008" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value agent.alert.Severity Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value agent.alert.Severity Should exist in Get-DbcConfig" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value agent.databasemailprofile Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value agent.databasemailprofile Should exist in Get-DbcConfig" time="0.007" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value agent.dbaoperatoremail Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value agent.dbaoperatoremail Should exist in Get-DbcConfig" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value agent.dbaoperatorname Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value agent.dbaoperatorname Should exist in Get-DbcConfig" time="0.0078" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value agent.failsafeoperator Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value agent.failsafeoperator Should exist in Get-DbcConfig" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value agent.validjobowner.name Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value agent.validjobowner.name Should exist in Get-DbcConfig" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value app.cluster Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value app.cluster Should exist in Get-DbcConfig" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value app.computername Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value app.computername Should exist in Get-DbcConfig" time="0.0079" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value app.sqlinstance Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value app.sqlinstance Should exist in Get-DbcConfig" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value database.exists Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value database.exists Should exist in Get-DbcConfig" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value domain.domaincontroller Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value domain.domaincontroller Should exist in Get-DbcConfig" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value domain.name Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value domain.name Should exist in Get-DbcConfig" time="0.0126" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value domain.organizationalunit Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value domain.organizationalunit Should exist in Get-DbcConfig" time="0.0079" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value ola.JobName.CommandLogCleanup Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value ola.JobName.CommandLogCleanup Should exist in Get-DbcConfig" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value ola.JobName.DeleteBackupHistory Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value ola.JobName.DeleteBackupHistory Should exist in Get-DbcConfig" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value ola.JobName.OutputFileCleanup Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value ola.JobName.OutputFileCleanup Should exist in Get-DbcConfig" time="0.009" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value ola.JobName.PurgeBackupHistory Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value ola.JobName.PurgeBackupHistory Should exist in Get-DbcConfig" time="0.0081" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value ola.JobName.SystemFull Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value ola.JobName.SystemFull Should exist in Get-DbcConfig" time="0.008" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value ola.JobName.SystemIntegrity Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value ola.JobName.SystemIntegrity Should exist in Get-DbcConfig" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value ola.JobName.UserDiff Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value ola.JobName.UserDiff Should exist in Get-DbcConfig" time="0.0079" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value ola.JobName.UserFull Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value ola.JobName.UserFull Should exist in Get-DbcConfig" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value ola.JobName.UserIndex Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value ola.JobName.UserIndex Should exist in Get-DbcConfig" time="0.0072" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value ola.JobName.UserIntegrity Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value ola.JobName.UserIntegrity Should exist in Get-DbcConfig" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value ola.JobName.UserLog Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value ola.JobName.UserLog Should exist in Get-DbcConfig" time="0.0072" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.adlogingroup.excludecheck Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.adlogingroup.excludecheck Should exist in Get-DbcConfig" time="0.0079" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.adloginuser.excludecheck Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.adloginuser.excludecheck Should exist in Get-DbcConfig" time="0.008" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.backup.datadir Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.backup.datadir Should exist in Get-DbcConfig" time="0.0098" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.backup.defaultbackupcompression Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.backup.defaultbackupcompression Should exist in Get-DbcConfig" time="0.0167" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.backup.diffmaxhours Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.backup.diffmaxhours Should exist in Get-DbcConfig" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.backup.fullmaxdays Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.backup.fullmaxdays Should exist in Get-DbcConfig" time="0.0083" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.backup.logdir Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.backup.logdir Should exist in Get-DbcConfig" time="0.0133" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.backup.logmaxminutes Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.backup.logmaxminutes Should exist in Get-DbcConfig" time="0.0068" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.backup.newdbgraceperiod Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.backup.newdbgraceperiod Should exist in Get-DbcConfig" time="0.0067" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.backup.testserver Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.backup.testserver Should exist in Get-DbcConfig" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.build.behind Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.build.behind Should exist in Get-DbcConfig" time="0.0067" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.build.warningwindow Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.build.warningwindow Should exist in Get-DbcConfig" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.certificateexpiration.excludedb Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.certificateexpiration.excludedb Should exist in Get-DbcConfig" time="0.0064" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.certificateexpiration.warningwindow Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.certificateexpiration.warningwindow Should exist in Get-DbcConfig" time="0.0068" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.connection.authscheme Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.connection.authscheme Should exist in Get-DbcConfig" time="0.0082" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.connection.pingcount Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.connection.pingcount Should exist in Get-DbcConfig" time="0.0087" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.connection.pingmaxms Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.connection.pingmaxms Should exist in Get-DbcConfig" time="0.0113" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.dacallowed Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.dacallowed Should exist in Get-DbcConfig" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.database.autoclose Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.database.autoclose Should exist in Get-DbcConfig" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.database.autocreatestatistics Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.database.autocreatestatistics Should exist in Get-DbcConfig" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.database.autoshrink Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.database.autoshrink Should exist in Get-DbcConfig" time="0.0078" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.database.autoupdatestatistics Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.database.autoupdatestatistics Should exist in Get-DbcConfig" time="0.0083" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.database.autoupdatestatisticsasynchronously Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.database.autoupdatestatisticsasynchronously Should exist in Get-DbcConfig" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.database.filebalancetolerance Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.database.filebalancetolerance Should exist in Get-DbcConfig" time="0.0078" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.database.filegrowthexcludedb Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.database.filegrowthexcludedb Should exist in Get-DbcConfig" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.database.filegrowthfreespacethreshold Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.database.filegrowthfreespacethreshold Should exist in Get-DbcConfig" time="0.0091" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.database.filegrowthtype Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.database.filegrowthtype Should exist in Get-DbcConfig" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.database.filegrowthvalue Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.database.filegrowthvalue Should exist in Get-DbcConfig" time="0.007" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.database.logfilecount Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.database.logfilecount Should exist in Get-DbcConfig" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.database.logfilesizecomparison Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.database.logfilesizecomparison Should exist in Get-DbcConfig" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.database.logfilesizepercentage Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.database.logfilesizepercentage Should exist in Get-DbcConfig" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.database.maxdop Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.database.maxdop Should exist in Get-DbcConfig" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.database.maxdopexcludedb Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.database.maxdopexcludedb Should exist in Get-DbcConfig" time="0.0116" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.database.maxvlf Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.database.maxvlf Should exist in Get-DbcConfig" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.database.status.excludeoffline Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.database.status.excludeoffline Should exist in Get-DbcConfig" time="0.0078" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.database.status.excludereadonly Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.database.status.excludereadonly Should exist in Get-DbcConfig" time="0.007" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.database.status.excluderestoring Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.database.status.excluderestoring Should exist in Get-DbcConfig" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.database.wrongcollation Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.database.wrongcollation Should exist in Get-DbcConfig" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.dbcc.maxdays Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.dbcc.maxdays Should exist in Get-DbcConfig" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.diskspace.percentfree Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.diskspace.percentfree Should exist in Get-DbcConfig" time="0.0078" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.dump.maxcount Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.dump.maxcount Should exist in Get-DbcConfig" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.errorlog.logcount Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.errorlog.logcount Should exist in Get-DbcConfig" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.errorlog.warningwindow Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.errorlog.warningwindow Should exist in Get-DbcConfig" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.hadr.tcpport Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.hadr.tcpport Should exist in Get-DbcConfig" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.identity.usagepercent Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.identity.usagepercent Should exist in Get-DbcConfig" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.instancemaxdop.excludeinstance Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.instancemaxdop.excludeinstance Should exist in Get-DbcConfig" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.instancemaxdop.maxdop Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.instancemaxdop.maxdop Should exist in Get-DbcConfig" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.instancemaxdop.userecommended Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.instancemaxdop.userecommended Should exist in Get-DbcConfig" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.invaliddbowner.excludedb Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.invaliddbowner.excludedb Should exist in Get-DbcConfig" time="0.0114" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.invaliddbowner.name Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.invaliddbowner.name Should exist in Get-DbcConfig" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.network.latencymaxms Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.network.latencymaxms Should exist in Get-DbcConfig" time="0.0079" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.ola.CommandLogCleanUp Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.ola.CommandLogCleanUp Should exist in Get-DbcConfig" time="0.0081" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.ola.CommandLogenabled Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.ola.CommandLogenabled Should exist in Get-DbcConfig" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.ola.CommandLogscheduled Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.ola.CommandLogscheduled Should exist in Get-DbcConfig" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.ola.database Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.ola.database Should exist in Get-DbcConfig" time="0.008" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.ola.DeleteBackupHistoryCleanUp Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.ola.DeleteBackupHistoryCleanUp Should exist in Get-DbcConfig" time="0.0083" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.ola.DeleteBackupHistoryenabled Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.ola.DeleteBackupHistoryenabled Should exist in Get-DbcConfig" time="0.0084" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.ola.DeleteBackupHistoryscheduled Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.ola.DeleteBackupHistoryscheduled Should exist in Get-DbcConfig" time="0.0083" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.ola.OutputFileCleanUp Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.ola.OutputFileCleanUp Should exist in Get-DbcConfig" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.ola.OutputFileCleanupenabled Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.ola.OutputFileCleanupenabled Should exist in Get-DbcConfig" time="0.0087" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.ola.OutputFileCleanupscheduled Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.ola.OutputFileCleanupscheduled Should exist in Get-DbcConfig" time="0.0079" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.ola.PurgeJobHistoryCleanUp Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.ola.PurgeJobHistoryCleanUp Should exist in Get-DbcConfig" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.ola.PurgeJobHistoryenabled Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.ola.PurgeJobHistoryenabled Should exist in Get-DbcConfig" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.ola.PurgeJobHistoryscheduled Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.ola.PurgeJobHistoryscheduled Should exist in Get-DbcConfig" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.ola.SystemFullenabled Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.ola.SystemFullenabled Should exist in Get-DbcConfig" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.ola.SystemFullretention Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.ola.SystemFullretention Should exist in Get-DbcConfig" time="0.0144" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.ola.SystemFullscheduled Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.ola.SystemFullscheduled Should exist in Get-DbcConfig" time="0.0083" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.ola.SystemIntegrityCheckenabled Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.ola.SystemIntegrityCheckenabled Should exist in Get-DbcConfig" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.ola.SystemIntegrityCheckscheduled Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.ola.SystemIntegrityCheckscheduled Should exist in Get-DbcConfig" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.ola.UserDiffenabled Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.ola.UserDiffenabled Should exist in Get-DbcConfig" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.ola.UserDiffretention Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.ola.UserDiffretention Should exist in Get-DbcConfig" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.ola.UserDiffscheduled Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.ola.UserDiffscheduled Should exist in Get-DbcConfig" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.ola.UserFullenabled Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.ola.UserFullenabled Should exist in Get-DbcConfig" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.ola.UserFullretention Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.ola.UserFullretention Should exist in Get-DbcConfig" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.ola.UserFullscheduled Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.ola.UserFullscheduled Should exist in Get-DbcConfig" time="0.008" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.ola.UserIndexOptimizeenabled Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.ola.UserIndexOptimizeenabled Should exist in Get-DbcConfig" time="0.0079" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.ola.UserIndexOptimizescheduled Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.ola.UserIndexOptimizescheduled Should exist in Get-DbcConfig" time="0.0079" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.ola.UserIntegrityCheckenabled Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.ola.UserIntegrityCheckenabled Should exist in Get-DbcConfig" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.ola.UserIntegrityCheckscheduled Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.ola.UserIntegrityCheckscheduled Should exist in Get-DbcConfig" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.ola.UserLogenabled Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.ola.UserLogenabled Should exist in Get-DbcConfig" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.ola.UserLogretention Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.ola.UserLogretention Should exist in Get-DbcConfig" time="0.0069" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.ola.UserLogscheduled Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.ola.UserLogscheduled Should exist in Get-DbcConfig" time="0.0124" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.oleautomation Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.oleautomation Should exist in Get-DbcConfig" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.pageverify Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.pageverify Should exist in Get-DbcConfig" time="0.0082" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.recoverymodel.excludedb Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.recoverymodel.excludedb Should exist in Get-DbcConfig" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.recoverymodel.type Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.recoverymodel.type Should exist in Get-DbcConfig" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.security.AdHocDistributedQueriesEnabled Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.security.AdHocDistributedQueriesEnabled Should exist in Get-DbcConfig" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.security.clrenabled Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.security.clrenabled Should exist in Get-DbcConfig" time="0.0078" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.security.crossdbownershipchaining Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.security.crossdbownershipchaining Should exist in Get-DbcConfig" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.security.DatabaseMailEnabled Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.security.DatabaseMailEnabled Should exist in Get-DbcConfig" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.security.XpCmdShellDisabled Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.security.XpCmdShellDisabled Should exist in Get-DbcConfig" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.server.cpuprioritisation Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.server.cpuprioritisation Should exist in Get-DbcConfig" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.storage.backuppath Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.storage.backuppath Should exist in Get-DbcConfig" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.traceflags.expected Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.traceflags.expected Should exist in Get-DbcConfig" time="0.007" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.traceflags.notexpected Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.traceflags.notexpected Should exist in Get-DbcConfig" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.twodigityearcutoff Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.twodigityearcutoff Should exist in Get-DbcConfig" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.validdbowner.excludedb Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.validdbowner.excludedb Should exist in Get-DbcConfig" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.validdbowner.name Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.validdbowner.name Should exist in Get-DbcConfig" time="0.0122" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.whoisactive.database Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.whoisactive.database Should exist in Get-DbcConfig" time="0.007" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.xevent.requiredrunningsession Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.xevent.requiredrunningsession Should exist in Get-DbcConfig" time="0.0069" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.xevent.requiredstoppedsession Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.xevent.requiredstoppedsession Should exist in Get-DbcConfig" time="0.0081" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value policy.xevent.validrunningsession Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value policy.xevent.validrunningsession Should exist in Get-DbcConfig" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value skip.backup.readonly Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value skip.backup.readonly Should exist in Get-DbcConfig" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value skip.backup.testing Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value skip.backup.testing Should exist in Get-DbcConfig" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value skip.connection.ping Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value skip.connection.ping Should exist in Get-DbcConfig" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value skip.connection.remoting Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value skip.connection.remoting Should exist in Get-DbcConfig" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value skip.database.filegrowthdisabled Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value skip.database.filegrowthdisabled Should exist in Get-DbcConfig" time="0.0072" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value skip.database.logfilecounttest Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value skip.database.logfilecounttest Should exist in Get-DbcConfig" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value skip.dbcc.datapuritycheck Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value skip.dbcc.datapuritycheck Should exist in Get-DbcConfig" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value skip.diffbackuptest Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value skip.diffbackuptest Should exist in Get-DbcConfig" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value skip.hadr.listener.pingcheck Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value skip.hadr.listener.pingcheck Should exist in Get-DbcConfig" time="0.007" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value skip.instance.modeldbgrowth Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value skip.instance.modeldbgrowth Should exist in Get-DbcConfig" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value skip.TempDb1118 Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value skip.TempDb1118 Should exist in Get-DbcConfig" time="0.0067" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value skip.tempdbfileCount Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value skip.tempdbfileCount Should exist in Get-DbcConfig" time="0.0114" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value skip.TempDbFileGrowthPercent Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value skip.TempDbFileGrowthPercent Should exist in Get-DbcConfig" time="0.0092" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value skip.TempDbFileSizeMax Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value skip.TempDbFileSizeMax Should exist in Get-DbcConfig" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Config Value skip.TempDbFilesonC Should exist in Get-DbcConfig" name="Each Config referenced in a check should exist.Config Value skip.TempDbFilesonC Should exist in Get-DbcConfig" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Database Tests Exclusions" executed="True" result="Success" success="True" time="0.4157" asserts="0" description="Database Tests Exclusions">
            <results>
              <test-case description="Database Collation should reference the gloabl exclude configuration" name="Database Tests Exclusions.Database Collation should reference the gloabl exclude configuration" time="0.1219" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Suspect Page should reference the gloabl exclude configuration" name="Database Tests Exclusions.Suspect Page should reference the gloabl exclude configuration" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Last Backup Restore Test should reference the gloabl exclude configuration" name="Database Tests Exclusions.Last Backup Restore Test should reference the gloabl exclude configuration" time="0.0069" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Last Backup VerifyOnly should reference the gloabl exclude configuration" name="Database Tests Exclusions.Last Backup VerifyOnly should reference the gloabl exclude configuration" time="0.0078" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Valid Database Owner should reference the gloabl exclude configuration" name="Database Tests Exclusions.Valid Database Owner should reference the gloabl exclude configuration" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Invalid Database Owner should reference the gloabl exclude configuration" name="Database Tests Exclusions.Invalid Database Owner should reference the gloabl exclude configuration" time="0.008" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Last Good DBCC CHECKDB should reference the gloabl exclude configuration" name="Database Tests Exclusions.Last Good DBCC CHECKDB should reference the gloabl exclude configuration" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Column Identity Usage should reference the gloabl exclude configuration" name="Database Tests Exclusions.Column Identity Usage should reference the gloabl exclude configuration" time="0.0081" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Recovery Model should reference the gloabl exclude configuration" name="Database Tests Exclusions.Recovery Model should reference the gloabl exclude configuration" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Duplicate Index should reference the gloabl exclude configuration" name="Database Tests Exclusions.Duplicate Index should reference the gloabl exclude configuration" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Unused Index should reference the gloabl exclude configuration" name="Database Tests Exclusions.Unused Index should reference the gloabl exclude configuration" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Disabled Index should reference the gloabl exclude configuration" name="Database Tests Exclusions.Disabled Index should reference the gloabl exclude configuration" time="0.007" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Database Growth Event should reference the gloabl exclude configuration" name="Database Tests Exclusions.Database Growth Event should reference the gloabl exclude configuration" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Page Verify should reference the gloabl exclude configuration" name="Database Tests Exclusions.Page Verify should reference the gloabl exclude configuration" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Auto Close should reference the gloabl exclude configuration" name="Database Tests Exclusions.Auto Close should reference the gloabl exclude configuration" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Auto Shrink should reference the gloabl exclude configuration" name="Database Tests Exclusions.Auto Shrink should reference the gloabl exclude configuration" time="0.0091" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Last Full Backup Times should reference the gloabl exclude configuration" name="Database Tests Exclusions.Last Full Backup Times should reference the gloabl exclude configuration" time="0.0094" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Last Diff Backup Times should reference the gloabl exclude configuration" name="Database Tests Exclusions.Last Diff Backup Times should reference the gloabl exclude configuration" time="0.0091" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Last Log Backup Times should reference the gloabl exclude configuration" name="Database Tests Exclusions.Last Log Backup Times should reference the gloabl exclude configuration" time="0.0088" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Virtual Log Files should reference the gloabl exclude configuration" name="Database Tests Exclusions.Virtual Log Files should reference the gloabl exclude configuration" time="0.0093" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Log File Count Checks should reference the gloabl exclude configuration" name="Database Tests Exclusions.Log File Count Checks should reference the gloabl exclude configuration" time="0.0083" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Log File Size Checks should reference the gloabl exclude configuration" name="Database Tests Exclusions.Log File Size Checks should reference the gloabl exclude configuration" time="0.0084" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Future File Growth should reference the gloabl exclude configuration" name="Database Tests Exclusions.Future File Growth should reference the gloabl exclude configuration" time="0.0122" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Correctly sized Filegroup members should reference the gloabl exclude configuration" name="Database Tests Exclusions.Correctly sized Filegroup members should reference the gloabl exclude configuration" time="0.0072" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Certificate Expiration should reference the gloabl exclude configuration" name="Database Tests Exclusions.Certificate Expiration should reference the gloabl exclude configuration" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Auto Create Statistics should reference the gloabl exclude configuration" name="Database Tests Exclusions.Auto Create Statistics should reference the gloabl exclude configuration" time="0.0072" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Auto Update Statistics should reference the gloabl exclude configuration" name="Database Tests Exclusions.Auto Update Statistics should reference the gloabl exclude configuration" time="0.0078" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Auto Update Statistics Asynchronously should reference the gloabl exclude configuration" name="Database Tests Exclusions.Auto Update Statistics Asynchronously should reference the gloabl exclude configuration" time="0.0081" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Datafile Auto Growth Configuration should reference the gloabl exclude configuration" name="Database Tests Exclusions.Datafile Auto Growth Configuration should reference the gloabl exclude configuration" time="0.0076" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Trustworthy Option should reference the gloabl exclude configuration" name="Database Tests Exclusions.Trustworthy Option should reference the gloabl exclude configuration" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Database Orphaned User should reference the gloabl exclude configuration" name="Database Tests Exclusions.Database Orphaned User should reference the gloabl exclude configuration" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="PseudoSimple Recovery Model should reference the gloabl exclude configuration" name="Database Tests Exclusions.PseudoSimple Recovery Model should reference the gloabl exclude configuration" time="0.0103" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Compatibility Level should reference the gloabl exclude configuration" name="Database Tests Exclusions.Compatibility Level should reference the gloabl exclude configuration" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Foreign keys and check constraints not trusted should reference the gloabl exclude configuration" name="Database Tests Exclusions.Foreign keys and check constraints not trusted should reference the gloabl exclude configuration" time="0.0124" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Database MaxDop should reference the gloabl exclude configuration" name="Database Tests Exclusions.Database MaxDop should reference the gloabl exclude configuration" time="0.0102" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Database Status should reference the gloabl exclude configuration" name="Database Tests Exclusions.Database Status should reference the gloabl exclude configuration" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Database Exists should reference the gloabl exclude configuration" name="Database Tests Exclusions.Database Exists should reference the gloabl exclude configuration" time="0.0069" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
    </results>
  </test-suite>
</test-results>